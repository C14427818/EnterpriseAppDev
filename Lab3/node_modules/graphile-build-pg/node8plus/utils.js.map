{"version":3,"sources":["../src/utils.js"],"names":["constantCaseAll","str","replace","toUpperCase","formatInsideUnderscores","fn","matches","match","Error","start","middle","end","upperFirst","camelCase","constantCase","upperCamelCase","parseTags","split","reduce","prev","curr","text","key","substr","trim","value","tags","hasOwnProperty","Array","isArray"],"mappings":";;;;;;;;;;;AACA;;;;AACA;;;;;;AAEO,MAAMA,4CAAmBC,GAAD,IAC7BA,IACGC,OADH,CACW,iBADX,EAC8B,GAD9B,EAEGA,OAFH,CAEW,SAFX,EAEsB,KAFtB,EAGGA,OAHH,CAGW,MAHX,EAGmB,GAHnB,EAIGA,OAJH,CAIW,gBAJX,EAI6B,EAJ7B,EAKGA,OALH,CAKW,QALX,EAKqB,KALrB,EAK4B;AAL5B,CAMGC,WANH,EADK;;AASA,MAAMC,4DAA2BC,EAAD,IACrCJ,GADwE,IAErE;AACH,QAAMK,UAAUL,IAAIM,KAAJ,CAAU,sBAAV,CAAhB;AACA,MAAI,CAACD,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAU,aAAV,CAAN,CADY,CACoB;AACjC;AACD,QAAM,GAAGC,KAAH,EAAUC,MAAV,EAAkBC,GAAlB,IAAyBL,OAA/B;AACA,SAAQ,GAAEG,KAAM,GAAEJ,GAAGK,MAAH,CAAW,GAAEC,GAAI,EAAnC;AACD,CATM;;AAWA,MAAMC,kCAAaR,6CAAnB;AACA,MAAMS,gCAAYT,4CAAlB;AACA,MAAMU,sCAAeV,wBAAwBJ,eAAxB,CAArB;AACA,MAAMe,0CAAkBd,GAAD,IAC5BW,WAAWC,UAAUZ,GAAV,CAAX,CADK;;AAGA,MAAMe,gCAAaf,GAAD,IAAiB;AACxC,SAAOA,IAAIgB,KAAJ,CAAW,IAAX,EAAgBC,MAAhB,CACL,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACd,QAAID,KAAKE,IAAL,KAAc,EAAlB,EAAsB;AACpB,aAAO,sBAAc,EAAd,EAAkBF,IAAlB,EAAwB;AAC7BE,cAAO,GAAEF,KAAKE,IAAK,KAAID,IAAK;AADC,OAAxB,CAAP;AAGD;AACD,UAAMb,QAAQa,KAAKb,KAAL,CAAW,+BAAX,CAAd;AACA,QAAI,CAACA,KAAL,EAAY;AACV,aAAO,sBAAc,EAAd,EAAkBY,IAAlB,EAAwB;AAC7BE,cAAMD;AADuB,OAAxB,CAAP;AAGD;AACD,UAAME,MAAMf,MAAM,CAAN,EAASgB,MAAT,CAAgB,CAAhB,EAAmBC,IAAnB,EAAZ;AACA,UAAMC,QAAQlB,MAAM,CAAN,MAAaa,IAAb,GAAoB,IAApB,GAA2BA,KAAKlB,OAAL,CAAaK,MAAM,CAAN,CAAb,EAAuB,EAAvB,CAAzC;AACA,WAAO,sBAAc,EAAd,EAAkBY,IAAlB,EAAwB;AAC7BO,YAAM,sBAAc,EAAd,EAAkBP,KAAKO,IAAvB,EAA6B;AACjC,SAACJ,GAAD,GAAO,CAACH,KAAKO,IAAL,CAAUC,cAAV,CAAyBL,GAAzB,CAAD,GACHG,KADG,GAEHG,MAAMC,OAAN,CAAcV,KAAKO,IAAL,CAAUJ,GAAV,CAAd,IACE,CAAC,GAAGH,KAAKO,IAAL,CAAUJ,GAAV,CAAJ,EAAoBG,KAApB,CADF,GAEE,CAACN,KAAKO,IAAL,CAAUJ,GAAV,CAAD,EAAiBG,KAAjB;AAL2B,OAA7B;AADuB,KAAxB,CAAP;AASD,GAxBI,EAyBL;AACEC,UAAM,EADR;AAEEL,UAAM;AAFR,GAzBK,CAAP;AA8BD,CA/BM","file":"utils.js","sourcesContent":["// @flow\nimport upperFirstAll from \"lodash/upperFirst\";\nimport camelCaseAll from \"lodash/camelCase\";\n\nexport const constantCaseAll = (str: string) =>\n  str\n    .replace(/[^a-zA-Z0-9_]+/g, \"_\")\n    .replace(/[A-Z]+/g, \"_$&\")\n    .replace(/__+/g, \"_\")\n    .replace(/^[^a-zA-Z0-9]+/, \"\")\n    .replace(/^[0-9]/, \"_$&\") // GraphQL enums must not start with a number\n    .toUpperCase();\n\nexport const formatInsideUnderscores = (fn: (input: string) => string) => (\n  str: string\n) => {\n  const matches = str.match(/^(_*)([\\s\\S]*?)(_*)$/);\n  if (!matches) {\n    throw new Error(\"Impossible?\"); // Satiate Flow\n  }\n  const [, start, middle, end] = matches;\n  return `${start}${fn(middle)}${end}`;\n};\n\nexport const upperFirst = formatInsideUnderscores(upperFirstAll);\nexport const camelCase = formatInsideUnderscores(camelCaseAll);\nexport const constantCase = formatInsideUnderscores(constantCaseAll);\nexport const upperCamelCase = (str: string): string =>\n  upperFirst(camelCase(str));\n\nexport const parseTags = (str: string) => {\n  return str.split(`\\n`).reduce(\n    (prev, curr) => {\n      if (prev.text !== \"\") {\n        return Object.assign({}, prev, {\n          text: `${prev.text}\\n${curr}`,\n        });\n      }\n      const match = curr.match(/^@[a-zA-Z][a-zA-Z0-9_]*($|\\s)/);\n      if (!match) {\n        return Object.assign({}, prev, {\n          text: curr,\n        });\n      }\n      const key = match[0].substr(1).trim();\n      const value = match[0] === curr ? true : curr.replace(match[0], \"\");\n      return Object.assign({}, prev, {\n        tags: Object.assign({}, prev.tags, {\n          [key]: !prev.tags.hasOwnProperty(key)\n            ? value\n            : Array.isArray(prev.tags[key])\n              ? [...prev.tags[key], value]\n              : [prev.tags[key], value],\n        }),\n      });\n    },\n    {\n      tags: {},\n      text: \"\",\n    }\n  );\n};\n"]}