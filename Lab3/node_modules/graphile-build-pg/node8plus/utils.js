"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseTags = exports.upperCamelCase = exports.constantCase = exports.camelCase = exports.upperFirst = exports.formatInsideUnderscores = exports.constantCaseAll = undefined;

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _upperFirst = require("lodash/upperFirst");

var _upperFirst2 = _interopRequireDefault(_upperFirst);

var _camelCase = require("lodash/camelCase");

var _camelCase2 = _interopRequireDefault(_camelCase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const constantCaseAll = exports.constantCaseAll = str => str.replace(/[^a-zA-Z0-9_]+/g, "_").replace(/[A-Z]+/g, "_$&").replace(/__+/g, "_").replace(/^[^a-zA-Z0-9]+/, "").replace(/^[0-9]/, "_$&") // GraphQL enums must not start with a number
.toUpperCase();

const formatInsideUnderscores = exports.formatInsideUnderscores = fn => str => {
  const matches = str.match(/^(_*)([\s\S]*?)(_*)$/);
  if (!matches) {
    throw new Error("Impossible?"); // Satiate Flow
  }
  const [, start, middle, end] = matches;
  return `${start}${fn(middle)}${end}`;
};

const upperFirst = exports.upperFirst = formatInsideUnderscores(_upperFirst2.default);
const camelCase = exports.camelCase = formatInsideUnderscores(_camelCase2.default);
const constantCase = exports.constantCase = formatInsideUnderscores(constantCaseAll);
const upperCamelCase = exports.upperCamelCase = str => upperFirst(camelCase(str));

const parseTags = exports.parseTags = str => {
  return str.split(`\n`).reduce((prev, curr) => {
    if (prev.text !== "") {
      return (0, _assign2.default)({}, prev, {
        text: `${prev.text}\n${curr}`
      });
    }
    const match = curr.match(/^@[a-zA-Z][a-zA-Z0-9_]*($|\s)/);
    if (!match) {
      return (0, _assign2.default)({}, prev, {
        text: curr
      });
    }
    const key = match[0].substr(1).trim();
    const value = match[0] === curr ? true : curr.replace(match[0], "");
    return (0, _assign2.default)({}, prev, {
      tags: (0, _assign2.default)({}, prev.tags, {
        [key]: !prev.tags.hasOwnProperty(key) ? value : Array.isArray(prev.tags[key]) ? [...prev.tags[key], value] : [prev.tags[key], value]
      })
    });
  }, {
    tags: {},
    text: ""
  });
};
//# sourceMappingURL=utils.js.map