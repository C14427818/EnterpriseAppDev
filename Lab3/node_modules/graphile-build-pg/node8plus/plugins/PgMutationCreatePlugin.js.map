{"version":3,"sources":["../../src/plugins/PgMutationCreatePlugin.js"],"names":["debug","PgMutationCreatePlugin","builder","pgInflection","inflection","pgDisableDefaultMutations","hook","fields","build","scope","isRootMutation","fieldWithHooks","extend","newWithHooks","parseResolveInfo","pgIntrospectionResultsByKind","pgGetGqlTypeByTypeId","pgGetGqlInputTypeByTypeId","pgSql","sql","gql2pg","graphql","GraphQLObjectType","GraphQLInputObjectType","GraphQLNonNull","GraphQLString","pgColumnFilter","class","filter","table","namespace","isSelectable","isInsertable","reduce","memo","Table","type","id","name","TableInput","tableTypeName","tableType","InputType","createInputType","description","clientMutationId","tableName","isPgCreateInputType","PayloadType","createPayloadType","recurseDataGeneratorsForField","resolve","data","isMutationPayload","isPgCreatePayloadType","pgIntrospection","fieldName","createField","context","getDataFromParsedResolveInfoFragment","args","input","pgClient","resolveInfo","parsedResolveInfoFragment","resolveData","insertedRowAlias","identifier","query","sqlColumns","sqlValues","inputData","attribute","attr","classId","forEach","column","val","Object","prototype","hasOwnProperty","call","push","mutationQuery","length","fragment","join","row","result","rows","e","pgFieldIntrospection","isPgCreateMutationField"],"mappings":"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","file":"PgMutationCreatePlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport debugFactory from \"debug\";\nimport viaTemporaryTable from \"./viaTemporaryTable\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nexport default (function PgMutationCreatePlugin(\n  builder,\n  { pgInflection: inflection, pgDisableDefaultMutations }\n) {\n  if (pgDisableDefaultMutations) {\n    return;\n  }\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, { scope: { isRootMutation }, fieldWithHooks }) => {\n      const {\n        extend,\n        newWithHooks,\n        parseResolveInfo,\n        pgIntrospectionResultsByKind,\n        pgGetGqlTypeByTypeId,\n        pgGetGqlInputTypeByTypeId,\n        pgSql: sql,\n        gql2pg,\n        graphql: {\n          GraphQLObjectType,\n          GraphQLInputObjectType,\n          GraphQLNonNull,\n          GraphQLString,\n        },\n        pgColumnFilter,\n      } = build;\n      if (!isRootMutation) {\n        return fields;\n      }\n\n      return extend(\n        fields,\n        pgIntrospectionResultsByKind.class\n          .filter(table => !!table.namespace)\n          .filter(table => table.isSelectable)\n          .filter(table => table.isInsertable)\n          .reduce((memo, table) => {\n            const Table = pgGetGqlTypeByTypeId(table.type.id);\n            if (!Table) {\n              debug(\n                `There was no table type for table '${table.namespace.name}.${\n                  table.name\n                }', so we're not generating a create mutation for it.`\n              );\n              return memo;\n            }\n            const TableInput = pgGetGqlInputTypeByTypeId(table.type.id);\n            if (!TableInput) {\n              debug(\n                `There was no input type for table '${table.namespace.name}.${\n                  table.name\n                }', so we're not generating a create mutation for it.`\n              );\n              return memo;\n            }\n            const tableTypeName = inflection.tableType(\n              table.name,\n              table.namespace.name\n            );\n            const InputType = newWithHooks(\n              GraphQLInputObjectType,\n              {\n                name: inflection.createInputType(\n                  table.name,\n                  table.namespace.name\n                ),\n                description: `All input for the create \\`${tableTypeName}\\` mutation.`,\n                fields: {\n                  clientMutationId: {\n                    description:\n                      \"An arbitrary string value with no semantic meaning. Will be included in the payload verbatim. May be used to track mutations by the client.\",\n                    type: GraphQLString,\n                  },\n                  [inflection.tableName(table.name, table.namespace.name)]: {\n                    description: `The \\`${tableTypeName}\\` to be created by this mutation.`,\n                    type: new GraphQLNonNull(TableInput),\n                  },\n                },\n              },\n              {\n                isPgCreateInputType: true,\n                pgInflection: table,\n              }\n            );\n            const PayloadType = newWithHooks(\n              GraphQLObjectType,\n              {\n                name: inflection.createPayloadType(\n                  table.name,\n                  table.namespace.name\n                ),\n                description: `The output of our create \\`${tableTypeName}\\` mutation.`,\n                fields: ({ recurseDataGeneratorsForField }) => {\n                  const tableName = inflection.tableName(\n                    table.name,\n                    table.namespace.name\n                  );\n                  recurseDataGeneratorsForField(tableName);\n                  return {\n                    clientMutationId: {\n                      description:\n                        \"The exact same `clientMutationId` that was provided in the mutation input, unchanged and unused. May be used by a client to track mutations.\",\n                      type: GraphQLString,\n                    },\n                    [tableName]: {\n                      description: `The \\`${tableTypeName}\\` that was created by this mutation.`,\n                      type: Table,\n                      resolve(data) {\n                        return data.data;\n                      },\n                    },\n                  };\n                },\n              },\n              {\n                isMutationPayload: true,\n                isPgCreatePayloadType: true,\n                pgIntrospection: table,\n              }\n            );\n            const fieldName = inflection.createField(\n              table.name,\n              table.namespace.name\n            );\n            memo[fieldName] = fieldWithHooks(\n              fieldName,\n              context => {\n                const { getDataFromParsedResolveInfoFragment } = context;\n                return {\n                  description: `Creates a single \\`${tableTypeName}\\`.`,\n                  type: PayloadType,\n                  args: {\n                    input: {\n                      type: new GraphQLNonNull(InputType),\n                    },\n                  },\n                  async resolve(data, { input }, { pgClient }, resolveInfo) {\n                    const parsedResolveInfoFragment = parseResolveInfo(\n                      resolveInfo\n                    );\n                    const resolveData = getDataFromParsedResolveInfoFragment(\n                      parsedResolveInfoFragment,\n                      PayloadType\n                    );\n                    const insertedRowAlias = sql.identifier(Symbol());\n                    const query = queryFromResolveData(\n                      insertedRowAlias,\n                      insertedRowAlias,\n                      resolveData,\n                      {}\n                    );\n                    const sqlColumns = [];\n                    const sqlValues = [];\n                    const inputData =\n                      input[\n                        inflection.tableName(table.name, table.namespace.name)\n                      ];\n                    pgIntrospectionResultsByKind.attribute\n                      .filter(attr => attr.classId === table.id)\n                      .filter(attr => pgColumnFilter(attr, build, context))\n                      .forEach(attr => {\n                        const fieldName = inflection.column(\n                          attr.name,\n                          table.name,\n                          table.namespace.name\n                        );\n                        const val = inputData[fieldName];\n                        if (\n                          Object.prototype.hasOwnProperty.call(\n                            inputData,\n                            fieldName\n                          )\n                        ) {\n                          sqlColumns.push(sql.identifier(attr.name));\n                          sqlValues.push(gql2pg(val, attr.type));\n                        }\n                      });\n\n                    const mutationQuery = sql.query`\n                    insert into ${sql.identifier(\n                      table.namespace.name,\n                      table.name\n                    )} ${\n                      sqlColumns.length\n                        ? sql.fragment`(\n                        ${sql.join(sqlColumns, \", \")}\n                      ) values(${sql.join(sqlValues, \", \")})`\n                        : sql.fragment`default values`\n                    } returning *`;\n\n                    let row;\n                    try {\n                      await pgClient.query(\"SAVEPOINT graphql_mutation\");\n                      const result = await viaTemporaryTable(\n                        pgClient,\n                        sql.identifier(table.namespace.name, table.name),\n                        mutationQuery,\n                        insertedRowAlias,\n                        query\n                      );\n                      row = result.rows[0];\n                      await pgClient.query(\n                        \"RELEASE SAVEPOINT graphql_mutation\"\n                      );\n                    } catch (e) {\n                      await pgClient.query(\n                        \"ROLLBACK TO SAVEPOINT graphql_mutation\"\n                      );\n                      throw e;\n                    }\n                    return {\n                      clientMutationId: input.clientMutationId,\n                      data: row,\n                    };\n                  },\n                };\n              },\n              {\n                pgFieldIntrospection: table,\n                isPgCreateMutationField: true,\n              }\n            );\n            return memo;\n          }, {}),\n        `Adding default 'create' mutation to root mutation`\n      );\n    }\n  );\n}: Plugin);\n"]}