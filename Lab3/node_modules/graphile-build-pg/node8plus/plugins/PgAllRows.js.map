{"version":3,"sources":["../../src/plugins/PgAllRows.js"],"names":["debugSql","PgAllRows","builder","pgInflection","inflection","pgViewUniqueKey","viewUniqueKey","hook","fields","parseResolveInfo","extend","getTypeByName","pgGetGqlTypeByTypeId","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","fieldWithHooks","scope","isRootQuery","class","filter","table","isSelectable","namespace","reduce","memo","TableType","type","id","tableTypeName","name","ConnectionType","connection","Error","attributes","attribute","attr","classId","primaryKeyConstraint","constraint","con","primaryKeys","keyAttributeNums","map","num","isView","t","classKind","uniqueIdAttribute","find","undefined","schema","sqlFullTableName","identifier","fieldName","allRows","getDataFromParsedResolveInfoFragment","description","args","resolve","parent","pgClient","resolveInfo","parsedResolveInfoFragment","resolveData","returnType","query","withPaginationAsFields","beforeLock","isOrderUnique","data","cursorPrefix","forEach","key","orderBy","fragment","getTableAlias","setOrderIsUnique","text","values","compile","enabled","rows","row","isPgFieldConnection","pgFieldIntrospection"],"mappings":"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","file":"PgAllRows.js","sourcesContent":["// @flow\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport debugFactory from \"debug\";\nimport addStartEndCursor from \"./addStartEndCursor\";\n\nimport type { Plugin } from \"graphile-build\";\n\nconst debugSql = debugFactory(\"graphile-build-pg:sql\");\n\nexport default (async function PgAllRows(\n  builder,\n  { pgInflection: inflection, pgViewUniqueKey: viewUniqueKey }\n) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields,\n      {\n        parseResolveInfo,\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeId,\n        pgSql: sql,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n      },\n      { fieldWithHooks, scope: { isRootQuery } }\n    ) => {\n      if (!isRootQuery) {\n        return fields;\n      }\n      return extend(\n        fields,\n        introspectionResultsByKind.class\n          .filter(table => table.isSelectable)\n          .filter(table => table.namespace)\n          .reduce((memo, table) => {\n            const TableType = pgGetGqlTypeByTypeId(table.type.id);\n            const tableTypeName = TableType.name;\n            const ConnectionType = getTypeByName(\n              inflection.connection(TableType.name)\n            );\n            if (!TableType) {\n              throw new Error(\n                `Could not find GraphQL type for table '${table.name}'`\n              );\n            }\n            const attributes = introspectionResultsByKind.attribute.filter(\n              attr => attr.classId === table.id\n            );\n            const primaryKeyConstraint = introspectionResultsByKind.constraint\n              .filter(con => con.classId === table.id)\n              .filter(con => con.type === \"p\")[0];\n            const primaryKeys =\n              primaryKeyConstraint &&\n              primaryKeyConstraint.keyAttributeNums.map(\n                num => attributes.filter(attr => attr.num === num)[0]\n              );\n            const isView = t => t.classKind === \"v\";\n            const uniqueIdAttribute = viewUniqueKey\n              ? attributes.find(attr => attr.name === viewUniqueKey)\n              : undefined;\n            if (!ConnectionType) {\n              throw new Error(\n                `Could not find GraphQL connection type for table '${\n                  table.name\n                }'`\n              );\n            }\n            const schema = table.namespace;\n            const sqlFullTableName = sql.identifier(schema.name, table.name);\n            if (TableType && ConnectionType) {\n              const fieldName = inflection.allRows(table.name, schema.name);\n              memo[fieldName] = fieldWithHooks(\n                fieldName,\n                ({ getDataFromParsedResolveInfoFragment }) => {\n                  return {\n                    description: `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`,\n                    type: ConnectionType,\n                    args: {},\n                    async resolve(parent, args, { pgClient }, resolveInfo) {\n                      const parsedResolveInfoFragment = parseResolveInfo(\n                        resolveInfo\n                      );\n                      const resolveData = getDataFromParsedResolveInfoFragment(\n                        parsedResolveInfoFragment,\n                        resolveInfo.returnType\n                      );\n                      const query = queryFromResolveData(\n                        sqlFullTableName,\n                        undefined,\n                        resolveData,\n                        {\n                          withPaginationAsFields: true,\n                        },\n                        builder => {\n                          if (primaryKeys) {\n                            builder.beforeLock(\"orderBy\", () => {\n                              if (!builder.isOrderUnique(false)) {\n                                // Order by PK if no order specified\n                                builder.data.cursorPrefix = [\"primary_key_asc\"];\n                                primaryKeys.forEach(key => {\n                                  builder.orderBy(\n                                    sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                                      key.name\n                                    )}`,\n                                    true\n                                  );\n                                });\n                                builder.setOrderIsUnique();\n                              }\n                            });\n                          } else if (isView(table) && !!uniqueIdAttribute) {\n                            builder.beforeLock(\"orderBy\", () => {\n                              if (!builder.isOrderUnique(false)) {\n                                builder.data.cursorPrefix = [\n                                  \"view_unique_key_asc\",\n                                ];\n                                builder.orderBy(\n                                  sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                                    uniqueIdAttribute.name\n                                  )}`,\n                                  true\n                                );\n                                builder.setOrderIsUnique();\n                              }\n                            });\n                          }\n                        }\n                      );\n                      const { text, values } = sql.compile(query);\n                      if (debugSql.enabled) debugSql(text);\n                      const { rows: [row] } = await pgClient.query(\n                        text,\n                        values\n                      );\n                      return addStartEndCursor(row);\n                    },\n                  };\n                },\n                {\n                  isPgFieldConnection: true,\n                  pgFieldIntrospection: table,\n                }\n              );\n            }\n            return memo;\n          }, {}),\n        `Adding 'all*' relations to root Query`\n      );\n    }\n  );\n}: Plugin);\n"]}