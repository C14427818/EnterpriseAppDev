{"version":3,"sources":["../../src/plugins/PgQueryProceduresPlugin.js"],"names":["debugWarn","PgQueryProceduresPlugin","builder","hook","fields","build","scope","isRootQuery","fieldWithHooks","extend","pgInflection","inflection","pgIntrospectionResultsByKind","introspectionResultsByKind","procedure","filter","proc","isStable","namespace","reduce","memo","argTypes","argTypeIds","map","typeId","typeById","some","type","class","isSelectable","firstArgType","namespaceId","name","startsWith","fieldName","functionName","e","console","warn","bold","yellow"],"mappings":";;;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,YAAY,qBAAa,wBAAb,CAAlB;;kBAEgB,SAASC,uBAAT,CAAiCC,OAAjC,EAA0C;AACxDA,UAAQC,IAAR,CACE,0BADF,EAEE,CAACC,MAAD,EAASC,KAAT,EAAgB,EAAEC,OAAO,EAAEC,WAAF,EAAT,EAA0BC,cAA1B,EAAhB,KAA+D;AAC7D,QAAI,CAACD,WAAL,EAAkB;AAChB,aAAOH,MAAP;AACD;AACD,UAAM;AACJK,YADI;AAEJC,oBAAcC,UAFV;AAGJC,oCAA8BC;AAH1B,QAIFR,KAJJ;AAKA,WAAOI,OACLL,MADK,EAELS,2BAA2BC,SAA3B,CACGC,MADH,CACUC,QAAQA,KAAKC,QADvB,EAEGF,MAFH,CAEUC,QAAQ,CAAC,CAACA,KAAKE,SAFzB,EAGGC,MAHH,CAGU,CAACC,IAAD,EAAOJ,IAAP,KAAgB;AACtB;;;;;;;;;;;;;;AAcA,YAAMK,WAAWL,KAAKM,UAAL,CAAgBC,GAAhB,CACfC,UAAUX,2BAA2BY,QAA3B,CAAoCD,MAApC,CADK,CAAjB;AAGA,UACEH,SAASK,IAAT,CACEC,QACEA,KAAKA,IAAL,KAAc,GAAd,IAAqBA,KAAKC,KAA1B,IAAmCD,KAAKC,KAAL,CAAWC,YAFlD,CADF,EAKE;AACA;AACA,eAAOT,IAAP;AACD;AACD,YAAMU,eAAeT,SAAS,CAAT,CAArB;AACA,UACES,gBACAA,aAAaH,IAAb,KAAsB,GADtB,IAEAG,aAAaF,KAFb,IAGAE,aAAaC,WAAb,KAA6Bf,KAAKe,WAHlC,IAIAf,KAAKgB,IAAL,CAAUC,UAAV,CAAsB,GAAEH,aAAaE,IAAK,GAA1C,CALF,EAME;AACA;AACA,eAAOZ,IAAP;AACD;;AAED,YAAMc,YAAYvB,WAAWwB,YAAX,CAChBnB,KAAKgB,IADW,EAEhBhB,KAAKE,SAAL,CAAec,IAFC,CAAlB;AAIA,UAAI;AACFZ,aAAKc,SAAL,IAAkB,6BAAcA,SAAd,EAAyBlB,IAAzB,EAA+BX,KAA/B,EAAsC;AACtDG;AADsD,SAAtC,CAAlB;AAGD,OAJD,CAIE,OAAO4B,CAAP,EAAU;AACV;AACAC,gBAAQC,IAAR,CACE,gBAAMC,IAAN,CAAWC,MAAX,CACG,2BAA0BxB,KAAKE,SAAL,CAAec,IAAK,IAC7ChB,KAAKgB,IACN,gEAHH,CADF;AAOAhC,kBAAUoC,CAAV;AACD;AACD,aAAOhB,IAAP;AACD,KA9DH,EA8DK,EA9DL,CAFK,EAiEJ,4CAjEI,CAAP;AAmED,GA9EH;AAgFD,C","file":"PgQueryProceduresPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport makeProcField from \"./makeProcField\";\nimport debugFactory from \"debug\";\nimport chalk from \"chalk\";\n\nconst debugWarn = debugFactory(\"graphile-build-pg:warn\");\n\nexport default (function PgQueryProceduresPlugin(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (fields, build, { scope: { isRootQuery }, fieldWithHooks }) => {\n      if (!isRootQuery) {\n        return fields;\n      }\n      const {\n        extend,\n        pgInflection: inflection,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n      } = build;\n      return extend(\n        fields,\n        introspectionResultsByKind.procedure\n          .filter(proc => proc.isStable)\n          .filter(proc => !!proc.namespace)\n          .reduce((memo, proc) => {\n            /*\n            proc =\n              { kind: 'procedure',\n                name: 'integration_webhook_secret',\n                description: null,\n                namespaceId: '6484381',\n                isStrict: false,\n                returnsSet: false,\n                isStable: true,\n                returnTypeId: '2950',\n                argTypeIds: [ '6484569' ],\n                argNames: [ 'integration' ],\n                argDefaultsNum: 0 }\n            */\n            const argTypes = proc.argTypeIds.map(\n              typeId => introspectionResultsByKind.typeById[typeId]\n            );\n            if (\n              argTypes.some(\n                type =>\n                  type.type === \"c\" && type.class && type.class.isSelectable\n              )\n            ) {\n              // Selects a table, ignore!\n              return memo;\n            }\n            const firstArgType = argTypes[0];\n            if (\n              firstArgType &&\n              firstArgType.type === \"c\" &&\n              firstArgType.class &&\n              firstArgType.namespaceId === proc.namespaceId &&\n              proc.name.startsWith(`${firstArgType.name}_`)\n            ) {\n              // It's a computed field, skip\n              return memo;\n            }\n\n            const fieldName = inflection.functionName(\n              proc.name,\n              proc.namespace.name\n            );\n            try {\n              memo[fieldName] = makeProcField(fieldName, proc, build, {\n                fieldWithHooks,\n              });\n            } catch (e) {\n              // eslint-disable-next-line no-console\n              console.warn(\n                chalk.bold.yellow(\n                  `Failed to add function '${proc.namespace.name}.${\n                    proc.name\n                  }'; run with 'DEBUG=\"graphile-build-pg:warn\"' to view the error`\n                )\n              );\n              debugWarn(e);\n            }\n            return memo;\n          }, {}),\n        `Adding query procedures to root Query type`\n      );\n    }\n  );\n}: Plugin);\n"]}