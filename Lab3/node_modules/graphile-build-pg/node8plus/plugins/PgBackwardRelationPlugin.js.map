{"version":3,"sources":["../../src/plugins/PgBackwardRelationPlugin.js"],"names":["debug","OMIT","DEPRECATED","ONLY","PgBackwardRelationPlugin","builder","pgInflection","inflection","pgLegacyRelations","legacyRelationMode","only","deprecated","hook","fields","extend","getTypeByName","pgGetGqlTypeByTypeId","pgIntrospectionResultsByKind","introspectionResultsByKind","pgSql","sql","getAliasFromResolveInfo","graphql","GraphQLNonNull","scope","isPgRowType","pgIntrospection","foreignTable","fieldWithHooks","Self","kind","foreignKeyConstraints","constraint","filter","con","type","foreignClassId","id","foreignAttributes","attribute","attr","classId","sort","a","b","num","reduce","memo","table","classById","tableTypeName","tableType","name","namespace","gqlTableType","foreignTableTypeName","gqlForeignTableType","Error","schema","attributes","keys","keyAttributeNums","map","foreignKeys","foreignKeyAttributeNums","every","_","singleKey","length","isUnique","find","c","isDeprecated","simpleKeys","k","column","class","manyRelationFieldName","manyRelationByKeys","singleRelationFieldName","singleRelationByKeys","primaryKeyConstraint","primaryKeys","shouldAddSingleRelation","shouldAddManyRelation","getDataFromParsedResolveInfoFragment","addDataGenerator","parsedResolveInfoFragment","pgQuery","queryBuilder","select","resolveData","tableAlias","identifier","foreignTableAlias","getTableAlias","query","asJson","addNullCase","withPagination","innerQueryBuilder","forEach","key","i","where","fragment","alias","description","args","resolve","data","_args","_context","resolveInfo","pgFieldIntrospection","ConnectionType","withPaginationAsFields","beforeLock","isOrderUnique","cursorPrefix","orderBy","setOrderIsUnique","connection","deprecationReason","undefined","isPgFieldConnection"],"mappings":"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","file":"PgBackwardRelationPlugin.js","sourcesContent":["// @flow\nimport debugFactory from \"debug\";\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport addStartEndCursor from \"./addStartEndCursor\";\n\nimport type { Plugin } from \"graphile-build\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\n\nconst OMIT = 0;\nconst DEPRECATED = 1;\nconst ONLY = 2;\n\nexport default (function PgBackwardRelationPlugin(\n  builder,\n  { pgInflection: inflection, pgLegacyRelations }\n) {\n  const legacyRelationMode =\n    {\n      only: ONLY,\n      deprecated: DEPRECATED,\n    }[pgLegacyRelations] || OMIT;\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields,\n      {\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeId,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgSql: sql,\n        getAliasFromResolveInfo,\n        graphql: { GraphQLNonNull },\n      },\n      {\n        scope: { isPgRowType, pgIntrospection: foreignTable },\n        fieldWithHooks,\n        Self,\n      }\n    ) => {\n      if (!isPgRowType || !foreignTable || foreignTable.kind !== \"class\") {\n        return fields;\n      }\n      // This is a relation in which WE are foreign\n      const foreignKeyConstraints = introspectionResultsByKind.constraint\n        .filter(con => con.type === \"f\")\n        .filter(con => con.foreignClassId === foreignTable.id);\n      const foreignAttributes = introspectionResultsByKind.attribute\n        .filter(attr => attr.classId === foreignTable.id)\n        .sort((a, b) => a.num - b.num);\n\n      return extend(\n        fields,\n        foreignKeyConstraints.reduce((memo, constraint) => {\n          const table =\n            introspectionResultsByKind.classById[constraint.classId];\n          const tableTypeName = inflection.tableType(\n            table.name,\n            table.namespace.name\n          );\n          const gqlTableType = pgGetGqlTypeByTypeId(table.type.id);\n          if (!gqlTableType) {\n            debug(\n              `Could not determine type for table with id ${constraint.classId}`\n            );\n            return memo;\n          }\n          const foreignTable =\n            introspectionResultsByKind.classById[constraint.foreignClassId];\n          const foreignTableTypeName = inflection.tableType(\n            foreignTable.name,\n            foreignTable.namespace.name\n          );\n          const gqlForeignTableType = pgGetGqlTypeByTypeId(\n            foreignTable.type.id\n          );\n          if (!gqlForeignTableType) {\n            debug(\n              `Could not determine type for foreign table with id ${\n                constraint.foreignClassId\n              }`\n            );\n            return memo;\n          }\n          if (!table) {\n            throw new Error(\n              `Could not find the table that referenced us (constraint: ${\n                constraint.name\n              })`\n            );\n          }\n          const schema = table.namespace;\n\n          const attributes = introspectionResultsByKind.attribute.filter(\n            attr => attr.classId === table.id\n          );\n\n          const keys = constraint.keyAttributeNums.map(\n            num => attributes.filter(attr => attr.num === num)[0]\n          );\n          const foreignKeys = constraint.foreignKeyAttributeNums.map(\n            num => foreignAttributes.filter(attr => attr.num === num)[0]\n          );\n          if (!keys.every(_ => _) || !foreignKeys.every(_ => _)) {\n            throw new Error(\"Could not find key columns!\");\n          }\n          const singleKey = keys.length === 1 ? keys[0] : null;\n          const isUnique = !!(\n            singleKey &&\n            introspectionResultsByKind.constraint.find(\n              c =>\n                c.classId === singleKey.classId &&\n                c.keyAttributeNums.length === 1 &&\n                c.keyAttributeNums[0] === singleKey.num &&\n                (c.type === \"p\" || c.type === \"u\")\n            )\n          );\n\n          const isDeprecated = isUnique && legacyRelationMode === DEPRECATED;\n\n          const simpleKeys = keys.map(k => ({\n            column: k.name,\n            table: k.class.name,\n            schema: k.class.namespace.name,\n          }));\n          const manyRelationFieldName = inflection.manyRelationByKeys(\n            simpleKeys,\n            table.name,\n            table.namespace.name,\n            foreignTable.name,\n            foreignTable.namespace.name\n          );\n          const singleRelationFieldName = isUnique\n            ? inflection.singleRelationByKeys(\n                simpleKeys,\n                table.name,\n                table.namespace.name,\n                foreignTable.name,\n                foreignTable.namespace.name\n              )\n            : null;\n\n          const primaryKeyConstraint = introspectionResultsByKind.constraint\n            .filter(con => con.classId === table.id)\n            .filter(con => con.type === \"p\")[0];\n          const primaryKeys =\n            primaryKeyConstraint &&\n            primaryKeyConstraint.keyAttributeNums.map(\n              num => attributes.filter(attr => attr.num === num)[0]\n            );\n\n          const shouldAddSingleRelation =\n            isUnique && legacyRelationMode !== ONLY;\n\n          const shouldAddManyRelation =\n            !isUnique ||\n            legacyRelationMode === DEPRECATED ||\n            legacyRelationMode === ONLY;\n\n          if (shouldAddSingleRelation) {\n            memo[singleRelationFieldName] = fieldWithHooks(\n              singleRelationFieldName,\n              ({ getDataFromParsedResolveInfoFragment, addDataGenerator }) => {\n                addDataGenerator(parsedResolveInfoFragment => {\n                  return {\n                    pgQuery: queryBuilder => {\n                      queryBuilder.select(() => {\n                        const resolveData = getDataFromParsedResolveInfoFragment(\n                          parsedResolveInfoFragment,\n                          gqlTableType\n                        );\n                        const tableAlias = sql.identifier(Symbol());\n                        const foreignTableAlias = queryBuilder.getTableAlias();\n                        const query = queryFromResolveData(\n                          sql.identifier(schema.name, table.name),\n                          tableAlias,\n                          resolveData,\n                          {\n                            asJson: true,\n                            addNullCase: true,\n                            withPagination: false,\n                          },\n                          innerQueryBuilder => {\n                            keys.forEach((key, i) => {\n                              innerQueryBuilder.where(\n                                sql.fragment`${tableAlias}.${sql.identifier(\n                                  key.name\n                                )} = ${foreignTableAlias}.${sql.identifier(\n                                  foreignKeys[i].name\n                                )}`\n                              );\n                            });\n                          }\n                        );\n                        return sql.fragment`(${query})`;\n                      }, parsedResolveInfoFragment.alias);\n                    },\n                  };\n                });\n                return {\n                  description: `Reads a single \\`${tableTypeName}\\` that is related to this \\`${foreignTableTypeName}\\`.`,\n                  type: gqlTableType,\n                  args: {},\n                  resolve: (data, _args, _context, resolveInfo) => {\n                    const alias = getAliasFromResolveInfo(resolveInfo);\n                    return data[alias];\n                  },\n                };\n              },\n              {\n                pgFieldIntrospection: table,\n              }\n            );\n          }\n          if (shouldAddManyRelation) {\n            memo[manyRelationFieldName] = fieldWithHooks(\n              manyRelationFieldName,\n              ({ getDataFromParsedResolveInfoFragment, addDataGenerator }) => {\n                addDataGenerator(parsedResolveInfoFragment => {\n                  return {\n                    pgQuery: queryBuilder => {\n                      queryBuilder.select(() => {\n                        const resolveData = getDataFromParsedResolveInfoFragment(\n                          parsedResolveInfoFragment,\n                          ConnectionType\n                        );\n                        const tableAlias = sql.identifier(Symbol());\n                        const foreignTableAlias = queryBuilder.getTableAlias();\n                        const query = queryFromResolveData(\n                          sql.identifier(schema.name, table.name),\n                          tableAlias,\n                          resolveData,\n                          {\n                            withPagination: true,\n                            withPaginationAsFields: false,\n                          },\n                          innerQueryBuilder => {\n                            if (primaryKeys) {\n                              innerQueryBuilder.beforeLock(\"orderBy\", () => {\n                                // append order by primary key to the list of orders\n                                if (!innerQueryBuilder.isOrderUnique(false)) {\n                                  innerQueryBuilder.data.cursorPrefix = [\n                                    \"primary_key_asc\",\n                                  ];\n                                  primaryKeys.forEach(key => {\n                                    innerQueryBuilder.orderBy(\n                                      sql.fragment`${innerQueryBuilder.getTableAlias()}.${sql.identifier(\n                                        key.name\n                                      )}`,\n                                      true\n                                    );\n                                  });\n                                  innerQueryBuilder.setOrderIsUnique();\n                                }\n                              });\n                            }\n\n                            keys.forEach((key, i) => {\n                              innerQueryBuilder.where(\n                                sql.fragment`${tableAlias}.${sql.identifier(\n                                  key.name\n                                )} = ${foreignTableAlias}.${sql.identifier(\n                                  foreignKeys[i].name\n                                )}`\n                              );\n                            });\n                          }\n                        );\n                        return sql.fragment`(${query})`;\n                      }, parsedResolveInfoFragment.alias);\n                    },\n                  };\n                });\n                const ConnectionType = getTypeByName(\n                  inflection.connection(gqlTableType.name)\n                );\n                return {\n                  description: `Reads and enables pagination through a set of \\`${tableTypeName}\\`.`,\n                  type: new GraphQLNonNull(ConnectionType),\n                  args: {},\n                  resolve: (data, _args, _context, resolveInfo) => {\n                    const alias = getAliasFromResolveInfo(resolveInfo);\n                    return addStartEndCursor(data[alias]);\n                  },\n                  deprecationReason: isDeprecated\n                    ? // $FlowFixMe\n                      `Please use ${singleRelationFieldName} instead`\n                    : undefined,\n                };\n              },\n              {\n                isPgFieldConnection: true,\n                pgFieldIntrospection: table,\n              }\n            );\n          }\n          return memo;\n        }, {}),\n        `Adding backward relations for ${Self.name}`\n      );\n    }\n  );\n}: Plugin);\n"]}