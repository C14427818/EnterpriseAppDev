{"version":3,"sources":["../../src/plugins/PgIntrospectionPlugin.js"],"names":["debug","INTROSPECTION_PATH","__dirname","WATCH_FIXTURES_PATH","readFile","filename","encoding","resolve","reject","err","res","PgIntrospectionPlugin","builder","pgConfig","pgSchemas","schemas","pgEnableTags","persistentMemoizeWithKey","key","fn","pgThrowOnMissingSchema","introspect","Array","isArray","Error","cacheKey","cloneResults","obj","result","reduce","memo","k","map","v","introspectionResultsByKind","pgClient","introspectionQuery","rows","query","object","kind","push","namespace","class","attribute","type","constraint","procedure","forEach","description","parsed","tags","text","knownSchemas","n","name","missingSchemas","filter","s","indexOf","length","errorMessage","join","console","warn","xByY","arrayOfX","attrKey","x","xByYAndZ","attrKey2","namespaceById","classById","typeById","attributeByClassIdAndNum","relate","array","newAttr","lookupAttr","lookup","missingOk","entry","releasePgClient","listener","stopListening","catch","e","removeListener","registerWatcher","triggerRebuild","Pool","connect","release","Client","on","end","watchSqlInner","sql","error","bold","yellow","handleChange","notification","channel","payload","JSON","parse","commands","schema","command","affectsOurSchemas","some","schemaName","hook","build","extend","pgIntrospectionResultsByKind"],"mappings":"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","file":"PgIntrospectionPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport withPgClient from \"../withPgClient\";\nimport { parseTags } from \"../utils\";\nimport { readFile as rawReadFile } from \"fs\";\nimport pg from \"pg\";\nimport debugFactory from \"debug\";\nimport chalk from \"chalk\";\nimport { quacksLikePgPool } from \"../withPgClient\";\n\nimport { version } from \"../../package.json\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\nconst INTROSPECTION_PATH = `${__dirname}/../../res/introspection-query.sql`;\nconst WATCH_FIXTURES_PATH = `${__dirname}/../../res/watch-fixtures.sql`;\n\n// Ref: https://github.com/graphile/postgraphile/tree/master/src/postgres/introspection/object\n\nexport type Namespace = {\n  kind: \"namespace\",\n  id: string,\n  name: string,\n  description: string,\n};\n\nexport type Proc = {\n  kind: \"procedure\",\n  name: string,\n  description: ?string,\n  namespaceId: string,\n  isStrict: boolean,\n  returnsSet: boolean,\n  isStable: boolean,\n  returnTypeId: string,\n  argTypeIds: Array<string>,\n  argNames: Array<string>,\n  argDefaultsNum: number,\n  namespace: Namespace,\n};\n\nfunction readFile(filename, encoding) {\n  return new Promise((resolve, reject) => {\n    rawReadFile(filename, encoding, (err, res) => {\n      if (err) reject(err);\n      else resolve(res);\n    });\n  });\n}\n\nexport default (async function PgIntrospectionPlugin(\n  builder,\n  {\n    pgConfig,\n    pgSchemas: schemas,\n    pgEnableTags,\n    persistentMemoizeWithKey = (key, fn) => fn(),\n    pgThrowOnMissingSchema = false,\n  }\n) {\n  async function introspect() {\n    // Perform introspection\n    if (!Array.isArray(schemas)) {\n      throw new Error(\"Argument 'schemas' (array) is required\");\n    }\n    const cacheKey = `PgIntrospectionPlugin-introspectionResultsByKind-v${version}`;\n    const cloneResults = obj => {\n      const result = Object.keys(obj).reduce((memo, k) => {\n        memo[k] = obj[k].map(v => Object.assign({}, v));\n        return memo;\n      }, {});\n      return result;\n    };\n    const introspectionResultsByKind = cloneResults(\n      await persistentMemoizeWithKey(cacheKey, () =>\n        withPgClient(pgConfig, async pgClient => {\n          const introspectionQuery = await readFile(INTROSPECTION_PATH, \"utf8\");\n          const { rows } = await pgClient.query(introspectionQuery, [schemas]);\n\n          const result = rows.reduce(\n            (memo, { object }) => {\n              memo[object.kind].push(object);\n              return memo;\n            },\n            {\n              namespace: [],\n              class: [],\n              attribute: [],\n              type: [],\n              constraint: [],\n              procedure: [],\n            }\n          );\n\n          // Parse tags from comments\n          [\"namespace\", \"class\", \"attribute\", \"type\", \"procedure\"].forEach(\n            kind => {\n              result[kind].forEach(object => {\n                if (pgEnableTags && object.description) {\n                  const parsed = parseTags(object.description);\n                  object.tags = parsed.tags;\n                  object.description = parsed.text;\n                } else {\n                  object.tags = {};\n                }\n              });\n            }\n          );\n\n          for (const k in result) {\n            result[k].map(Object.freeze);\n          }\n          return Object.freeze(result);\n        })\n      )\n    );\n\n    const knownSchemas = introspectionResultsByKind.namespace.map(n => n.name);\n    const missingSchemas = schemas.filter(s => knownSchemas.indexOf(s) < 0);\n    if (missingSchemas.length) {\n      const errorMessage = `You requested to use schema '${schemas.join(\n        \"', '\"\n      )}'; however we couldn't find some of those! Missing schemas are: '${missingSchemas.join(\n        \"', '\"\n      )}'`;\n      if (pgThrowOnMissingSchema) {\n        throw new Error(errorMessage);\n      } else {\n        console.warn(\"⚠️ WARNING⚠️  \" + errorMessage); // eslint-disable-line no-console\n      }\n    }\n\n    const xByY = (arrayOfX, attrKey) =>\n      arrayOfX.reduce((memo, x) => {\n        memo[x[attrKey]] = x;\n        return memo;\n      }, {});\n    const xByYAndZ = (arrayOfX, attrKey, attrKey2) =>\n      arrayOfX.reduce((memo, x) => {\n        memo[x[attrKey]] = memo[x[attrKey]] || {};\n        memo[x[attrKey]][x[attrKey2]] = x;\n        return memo;\n      }, {});\n    introspectionResultsByKind.namespaceById = xByY(\n      introspectionResultsByKind.namespace,\n      \"id\"\n    );\n    introspectionResultsByKind.classById = xByY(\n      introspectionResultsByKind.class,\n      \"id\"\n    );\n    introspectionResultsByKind.typeById = xByY(\n      introspectionResultsByKind.type,\n      \"id\"\n    );\n    introspectionResultsByKind.attributeByClassIdAndNum = xByYAndZ(\n      introspectionResultsByKind.attribute,\n      \"classId\",\n      \"num\"\n    );\n\n    const relate = (array, newAttr, lookupAttr, lookup, missingOk = false) => {\n      array.forEach(entry => {\n        const key = entry[lookupAttr];\n        const result = lookup[key];\n        if (key && !result) {\n          if (missingOk) {\n            return;\n          }\n          throw new Error(\n            `Could not look up '${newAttr}' by '${lookupAttr}' on '${JSON.stringify(\n              entry\n            )}'`\n          );\n        }\n        entry[newAttr] = result;\n      });\n    };\n\n    relate(\n      introspectionResultsByKind.class,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById,\n      true // Because it could be a type defined in a different namespace - which is fine so long as we don't allow querying it directly\n    );\n\n    relate(\n      introspectionResultsByKind.class,\n      \"type\",\n      \"typeId\",\n      introspectionResultsByKind.typeById\n    );\n\n    relate(\n      introspectionResultsByKind.attribute,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById\n    );\n\n    relate(\n      introspectionResultsByKind.attribute,\n      \"type\",\n      \"typeId\",\n      introspectionResultsByKind.typeById\n    );\n\n    relate(\n      introspectionResultsByKind.procedure,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById,\n      true\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"domainBaseType\",\n      \"domainBaseTypeId\",\n      introspectionResultsByKind.typeById,\n      true // Because not all types are domains\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"arrayItemType\",\n      \"arrayItemTypeId\",\n      introspectionResultsByKind.typeById,\n      true // Because not all types are arrays\n    );\n\n    return introspectionResultsByKind;\n  }\n\n  let introspectionResultsByKind = await introspect();\n\n  let pgClient, releasePgClient, listener;\n\n  function stopListening() {\n    if (pgClient) {\n      pgClient.query(\"unlisten postgraphile_watch\").catch(e => {\n        debug(`Error occurred trying to unlisten watch: ${e}`);\n      });\n      pgClient.removeListener(\"notification\", listener);\n    }\n    if (releasePgClient) {\n      releasePgClient();\n      pgClient = null;\n    }\n  }\n\n  builder.registerWatcher(async triggerRebuild => {\n    // In case we started listening before, clean up\n    await stopListening();\n\n    // Check we can get a pgClient\n    if (pgConfig instanceof pg.Pool || quacksLikePgPool(pgConfig)) {\n      pgClient = await pgConfig.connect();\n      releasePgClient = () => pgClient && pgClient.release();\n    } else if (typeof pgConfig === \"string\") {\n      pgClient = new pg.Client(pgConfig);\n      pgClient.on(\"error\", e => {\n        debug(\"pgClient error occurred: %s\", e);\n      });\n      releasePgClient = () =>\n        new Promise((resolve, reject) => {\n          if (pgClient) pgClient.end(err => (err ? reject(err) : resolve()));\n          else resolve();\n        });\n      await new Promise((resolve, reject) => {\n        if (pgClient) {\n          pgClient.connect(err => (err ? reject(err) : resolve()));\n        } else {\n          resolve();\n        }\n      });\n    } else {\n      throw new Error(\n        \"Cannot watch schema with this configuration - need a string or pg.Pool\"\n      );\n    }\n    // Install the watch fixtures.\n    const watchSqlInner = await readFile(WATCH_FIXTURES_PATH, \"utf8\");\n    const sql = `begin; ${watchSqlInner}; commit;`;\n    try {\n      await pgClient.query(sql);\n    } catch (error) {\n      /* eslint-disable no-console */\n      console.warn(\n        `${chalk.bold.yellow(\n          \"Failed to setup watch fixtures in Postgres database\"\n        )} ️️⚠️`\n      );\n      console.warn(\n        chalk.yellow(\n          \"This is likely because your Postgres user is not a superuser. If the\"\n        )\n      );\n      console.warn(\n        chalk.yellow(\n          \"fixtures already exist, the watch functionality may still work.\"\n        )\n      );\n      console.warn(\n        chalk.yellow(\"Enable DEBUG='graphile-build-pg' to see the error\")\n      );\n      debug(error);\n      /* eslint-enable no-console */\n      await pgClient.query(\"rollback\");\n    }\n\n    await pgClient.query(\"listen postgraphile_watch\");\n\n    const handleChange = async () => {\n      debug(`Schema change detected: re-inspecting schema...`);\n      introspectionResultsByKind = await introspect();\n      debug(`Schema change detected: re-inspecting schema complete`);\n      triggerRebuild();\n    };\n\n    listener = async notification => {\n      if (notification.channel !== \"postgraphile_watch\") {\n        return;\n      }\n      try {\n        const payload = JSON.parse(notification.payload);\n        payload.payload = payload.payload || [];\n        if (payload.type === \"ddl\") {\n          const commands = payload.payload\n            .filter(\n              ({ schema }) => schema == null || schemas.indexOf(schema) >= 0\n            )\n            .map(({ command }) => command);\n          if (commands.length) {\n            handleChange();\n          }\n        } else if (payload.type === \"drop\") {\n          const affectsOurSchemas = payload.payload.some(\n            schemaName => schemas.indexOf(schemaName) >= 0\n          );\n          if (affectsOurSchemas) {\n            handleChange();\n          }\n        } else {\n          throw new Error(`Payload type '${payload.type}' not recognised`);\n        }\n      } catch (e) {\n        debug(`Error occurred parsing notification payload: ${e}`);\n      }\n    };\n    pgClient.on(\"notification\", listener);\n    introspectionResultsByKind = await introspect();\n  }, stopListening);\n\n  builder.hook(\"build\", build => {\n    return build.extend(build, {\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n    });\n  });\n}: Plugin);\n"]}