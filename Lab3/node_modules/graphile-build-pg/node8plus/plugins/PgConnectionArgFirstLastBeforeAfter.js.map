{"version":3,"sources":["../../src/plugins/PgConnectionArgFirstLastBeforeAfter.js"],"names":["base64Decode","str","Buffer","String","toString","PgConnectionArgs","builder","hook","args","extend","getTypeByName","graphql","GraphQLInt","scope","isPgFieldConnection","pgFieldIntrospection","source","addArgDataGenerator","field","Self","kind","Cursor","connectionFirstLastBeforeAfter","first","offset","last","after","before","pgQuery","queryBuilder","addCursorConstraint","Error","cursor","isAfter","cursorValues","JSON","parse","addCursorCondition","description","type","name"],"mappings":";;;;;;;AAGA,MAAMA,eAAeC,OAAO,IAAIC,MAAJ,CAAWC,OAAOF,GAAP,CAAX,EAAwB,QAAxB,EAAkCG,QAAlC,CAA2C,MAA3C,CAA5B;;kBAEgB,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AACjDA,UAAQC,IAAR,CACE,qCADF,EAEE,CACEC,IADF,EAEE,EAAEC,MAAF,EAAUC,aAAV,EAAyBC,SAAS,EAAEC,UAAF,EAAlC,EAFF,EAGE;AACEC,WAAO,EAAEC,mBAAF,EAAuBC,sBAAsBC,MAA7C,EADT;AAEEC,uBAFF;AAGEC,SAHF;AAIEC;AAJF,GAHF,KASK;AACH,QACE,CAACL,mBAAD,IACA,CAACE,MADD,IAECA,OAAOI,IAAP,KAAgB,OAAhB,IAA2BJ,OAAOI,IAAP,KAAgB,WAH9C,EAIE;AACA,aAAOZ,IAAP;AACD;AACD,UAAMa,SAASX,cAAc,QAAd,CAAf;;AAEAO,wBAAoB,SAASK,8BAAT,CAAwC;AAC1DC,WAD0D;AAE1DC,YAF0D;AAG1DC,UAH0D;AAI1DC,WAJ0D;AAK1DC;AAL0D,KAAxC,EAMjB;AACD,aAAO;AACLC,iBAASC,gBAAgB;AACvB,cAAIH,SAAS,IAAb,EAAmB;AACjBI,gCAAoBJ,KAApB,EAA2B,IAA3B;AACD;AACD,cAAIC,UAAU,IAAd,EAAoB;AAClBG,gCAAoBH,MAApB,EAA4B,KAA5B;AACD;AACD,cAAIJ,SAAS,IAAb,EAAmB;AACjBM,yBAAaN,KAAb,CAAmBA,KAAnB;AACD;AACD,cAAIC,UAAU,IAAd,EAAoB;AAClBK,yBAAaL,MAAb,CAAoBA,MAApB;AACD;AACD,cAAIC,QAAQ,IAAZ,EAAkB;AAChB,gBAAIF,SAAS,IAAb,EAAmB;AACjB,oBAAM,IAAIQ,KAAJ,CAAU,8CAAV,CAAN;AACD;AACD,gBAAIP,UAAU,IAAd,EAAoB;AAClB,oBAAM,IAAIO,KAAJ,CACJ,+CADI,CAAN;AAGD;AACDF,yBAAaJ,IAAb,CAAkBA,IAAlB;AACD;;AAED,mBAASK,mBAAT,CAA6BE,MAA7B,EAAqCC,OAArC,EAA8C;AAC5C,kBAAMC,eAAeC,KAAKC,KAAL,CAAWpC,aAAagC,MAAb,CAAX,CAArB;AACA,mBAAOH,aAAaQ,kBAAb,CAAgCH,YAAhC,EAA8CD,OAA9C,CAAP;AACD;AACF;AA9BI,OAAP;AAgCD,KAvCD;;AAyCA,WAAOxB,OACLD,IADK,EAEL;AACEe,aAAO;AACLe,qBAAa,4CADR;AAELC,cAAM3B;AAFD,OADT;AAKEa,YAAM;AACJa,qBAAa,2CADT;AAEJC,cAAM3B;AAFF,OALR;AASEY,cAAQ;AACNc,qBACE,4HAFI;AAGNC,cAAM3B;AAHA,OATV;AAcEe,cAAQ;AACNW,qBACE,wDAFI;AAGNC,cAAMlB;AAHA,OAdV;AAmBEK,aAAO;AACLY,qBACE,uDAFG;AAGLC,cAAMlB;AAHD;AAnBT,KAFK,EA2BJ,+CAA8CH,MAAMsB,IAAK,SACxDrB,KAAKqB,IACN,GA7BI,CAAP;AA+BD,GA7FH;AA+FD,C","file":"PgConnectionArgFirstLastBeforeAfter.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nconst base64Decode = str => new Buffer(String(str), \"base64\").toString(\"utf8\");\n\nexport default (function PgConnectionArgs(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (\n      args,\n      { extend, getTypeByName, graphql: { GraphQLInt } },\n      {\n        scope: { isPgFieldConnection, pgFieldIntrospection: source },\n        addArgDataGenerator,\n        field,\n        Self,\n      }\n    ) => {\n      if (\n        !isPgFieldConnection ||\n        !source ||\n        (source.kind !== \"class\" && source.kind !== \"procedure\")\n      ) {\n        return args;\n      }\n      const Cursor = getTypeByName(\"Cursor\");\n\n      addArgDataGenerator(function connectionFirstLastBeforeAfter({\n        first,\n        offset,\n        last,\n        after,\n        before,\n      }) {\n        return {\n          pgQuery: queryBuilder => {\n            if (after != null) {\n              addCursorConstraint(after, true);\n            }\n            if (before != null) {\n              addCursorConstraint(before, false);\n            }\n            if (first != null) {\n              queryBuilder.first(first);\n            }\n            if (offset != null) {\n              queryBuilder.offset(offset);\n            }\n            if (last != null) {\n              if (first != null) {\n                throw new Error(\"We don't support setting both first and last\");\n              }\n              if (offset != null) {\n                throw new Error(\n                  \"We don't support setting both offset and last\"\n                );\n              }\n              queryBuilder.last(last);\n            }\n\n            function addCursorConstraint(cursor, isAfter) {\n              const cursorValues = JSON.parse(base64Decode(cursor));\n              return queryBuilder.addCursorCondition(cursorValues, isAfter);\n            }\n          },\n        };\n      });\n\n      return extend(\n        args,\n        {\n          first: {\n            description: \"Only read the first `n` values of the set.\",\n            type: GraphQLInt,\n          },\n          last: {\n            description: \"Only read the last `n` values of the set.\",\n            type: GraphQLInt,\n          },\n          offset: {\n            description:\n              \"Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.\",\n            type: GraphQLInt,\n          },\n          before: {\n            description:\n              \"Read all values in the set before (above) this cursor.\",\n            type: Cursor,\n          },\n          after: {\n            description:\n              \"Read all values in the set after (below) this cursor.\",\n            type: Cursor,\n          },\n        },\n        `Adding connection pagination args to field '${field.name}' of '${\n          Self.name\n        }'`\n      );\n    }\n  );\n}: Plugin);\n"]}