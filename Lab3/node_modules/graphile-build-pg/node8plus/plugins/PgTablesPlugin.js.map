{"version":3,"sources":["../../src/plugins/PgTablesPlugin.js"],"names":["base64","str","Buffer","String","toString","PgTablesPlugin","builder","pgInflection","inflection","pgForbidSetofFunctionsToReturnNull","handleNullRow","row","filter","startsWith","some","key","hook","_","build","getNodeIdForTypeAndIdentifiers","nodeIdFieldName","newWithHooks","pgSql","sql","pgIntrospectionResultsByKind","introspectionResultsByKind","getTypeByName","pgGetGqlTypeByTypeId","pgGetGqlInputTypeByTypeId","pgRegisterGqlTypeByTypeId","pgRegisterGqlInputTypeByTypeId","pg2GqlMapper","gql2pg","graphql","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","GraphQLInputObjectType","pgColumnFilter","nullableIf","condition","Type","Cursor","class","forEach","table","tablePgType","type","find","category","namespaceId","classId","id","Error","arrayTablePgType","arrayItemTypeId","primaryKeyConstraint","constraint","con","primaryKeys","keyAttributeNums","map","num","attributeByClassIdAndNum","attributes","attribute","attr","sort","a1","a2","tableTypeName","tableType","name","namespaceName","shouldHaveNodeId","isSelectable","namespace","length","cb","TableType","description","interfaces","fields","addDataGeneratorForField","Self","pgQuery","queryBuilder","select","fragment","join","getTableAlias","identifier","resolve","data","__identifiers","pgIntrospection","isPgRowType","isPgCompoundType","pgInputFields","inputType","context","unmap","obj","null","fieldName","column","pgInputField","v","isInputType","pgAddSubfield","attrName","pgType","spec","patchType","isPgPatch","_attrName","_type","EdgeType","edge","fieldWithHooks","recurseDataGeneratorsForField","cursor","addDataGenerator","usesCursor","__cursor","isCursorField","node","isEdgeType","isPgRowEdgeType","nodeType","PageInfo","connection","nodes","edges","pageInfo","isConnectionType","isPgRowConnectionType","edgeType","TableInputType"],"mappings":";;;;;;;;;;;;;;;;AAEA,MAAMA,SAASC,OAAO,IAAIC,MAAJ,CAAWC,OAAOF,GAAP,CAAX,EAAwBG,QAAxB,CAAiC,QAAjC,CAAtB;;kBAEgB,SAASC,cAAT,CACdC,OADc,EAEd,EAAEC,cAAcC,UAAhB,EAA4BC,qCAAqC,KAAjE,EAFc,EAGd;AACA,QAAMC,gBAAgBD,qCAClBE,OAAOA,GADW,GAElBA,OAAO;AACL,QACE,oBAAYA,GAAZ,EACGC,MADH,CACUX,OAAO,CAACA,IAAIY,UAAJ,CAAe,IAAf,CADlB,EAEGC,IAFH,CAEQC,OAAOJ,IAAII,GAAJ,MAAa,IAF5B,CADF,EAIE;AACA,aAAOJ,GAAP;AACD,KAND,MAMO;AACL,aAAO,IAAP;AACD;AACF,GAZL;;AAcAL,UAAQU,IAAR,CAAa,MAAb,EAAqB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACjC,UAAM;AACJC,oCADI;AAEJC,qBAFI;AAGJC,kBAHI;AAIJC,aAAOC,GAJH;AAKJC,oCAA8BC,0BAL1B;AAMJC,mBANI;AAOJC,0BAPI;AAQJC,+BARI;AASJC,+BATI;AAUJC,oCAVI;AAWJC,kBAXI;AAYJC,YAZI;AAaJC,eAAS;AACPC,yBADO;AAEPC,sBAFO;AAGPC,iBAHO;AAIPC,mBAJO;AAKPC;AALO,OAbL;AAoBJC;AApBI,QAqBFrB,KArBJ;AAsBA,UAAMsB,aAAa,CAACC,SAAD,EAAYC,IAAZ,KACjBD,YAAYC,IAAZ,GAAmB,IAAIP,cAAJ,CAAmBO,IAAnB,CADrB;AAEA,UAAMC,SAASjB,cAAc,QAAd,CAAf;AACAD,+BAA2BmB,KAA3B,CAAiCC,OAAjC,CAAyCC,SAAS;AAChD,YAAMC,cAActB,2BAA2BuB,IAA3B,CAAgCC,IAAhC,CAClBD,QACEA,KAAKA,IAAL,KAAc,GAAd,IACAA,KAAKE,QAAL,KAAkB,GADlB,IAEAF,KAAKG,WAAL,KAAqBL,MAAMK,WAF3B,IAGAH,KAAKI,OAAL,KAAiBN,MAAMO,EALP,CAApB;AAOA,UAAI,CAACN,WAAL,EAAkB;AAChB,cAAM,IAAIO,KAAJ,CAAU,6CAAV,CAAN;AACD;AACD,YAAMC,mBAAmB9B,2BAA2BuB,IAA3B,CAAgCC,IAAhC,CACvBD,QAAQA,KAAKQ,eAAL,KAAyBT,YAAYM,EADtB,CAAzB;AAGA;;;;;;;;;;;;;AAaA,YAAMI,uBAAuBhC,2BAA2BiC,UAA3B,CAC1B9C,MAD0B,CACnB+C,OAAOA,IAAIP,OAAJ,KAAgBN,MAAMO,EADV,EAE1BzC,MAF0B,CAEnB+C,OAAOA,IAAIX,IAAJ,KAAa,GAFD,EAEM,CAFN,CAA7B;AAGA,YAAMY,cACJH,wBACAA,qBAAqBI,gBAArB,CAAsCC,GAAtC,CACEC,OACEtC,2BAA2BuC,wBAA3B,CAAoDlB,MAAMO,EAA1D,EAA8DU,GAA9D,CAFJ,CAFF;AAMA,YAAME,aAAaxC,2BAA2ByC,SAA3B,CAChBtD,MADgB,CACTuD,QAAQA,KAAKf,OAAL,KAAiBN,MAAMO,EADtB,EAEhBe,IAFgB,CAEX,CAACC,EAAD,EAAKC,EAAL,KAAYD,GAAGN,GAAH,GAASO,GAAGP,GAFb,CAAnB;AAGA,YAAMQ,gBAAgB/D,WAAWgE,SAAX,CACpB1B,MAAM2B,IADc,EAEpB3B,MAAM4B,aAFc,CAAtB;AAIA,YAAMC,mBACJvD,mBACA0B,MAAM8B,YADN,IAEA9B,MAAM+B,SAFN,IAGAjB,WAHA,IAIAA,YAAYkB,MAJZ,GAKI,IALJ,GAMI,KAPN;AAQAjD,gCACEkB,YAAYM,EADd,EAEE0B,MAAM;AACJ,YAAIhD,aAAagB,YAAYM,EAAzB,CAAJ,EAAkC;AAChC;AACA,gBAAM,IAAIC,KAAJ,CACH,kEACCP,YAAYM,EACb,IAHG,CAAN;AAKD;AACD,cAAM2B,YAAY3D,aAChBa,iBADgB,EAEhB;AACE+C,uBAAanC,MAAMmC,WAAN,IAAqBlC,YAAYkC,WADhD;AAEER,gBAAMF,aAFR;AAGEW,sBAAY,MAAM;AAChB,gBAAIP,gBAAJ,EAAsB;AACpB,qBAAO,CAACjD,cAAc,MAAd,CAAD,CAAP;AACD,aAFD,MAEO;AACL,qBAAO,EAAP;AACD;AACF,WATH;AAUEyD,kBAAQ,CAAC,EAAEC,wBAAF,EAA4BC,IAA5B,EAAD,KAAwC;AAC9C,kBAAMF,SAAS,EAAf;AACA,gBAAIR,gBAAJ,EAAsB;AACpB;AACAS,uCAAyBhE,eAAzB,EAA0C,MAAM;AAC9C,uBAAO;AACLkE,2BAASC,gBAAgB;AACvBA,iCAAaC,MAAb,CACEjE,IAAIkE,QAAS,oBAAmBlE,IAAImE,IAAJ,CAC9B9B,YAAYE,GAAZ,CACE/C,OACEQ,IAAIkE,QAAS,GAAEF,aAAaI,aAAb,EAA6B,IAAGpE,IAAIqE,UAAJ,CAC7C7E,IAAI0D,IADyC,CAE7C,EAJN,CAD8B,EAO9B,IAP8B,CAQ9B,GATJ,EAUE,eAVF;AAYD;AAdI,iBAAP;AAgBD,eAjBD;AAkBAU,qBAAO/D,eAAP,IAA0B;AACxB6D,6BACE,kHAFsB;AAGxBjC,sBAAM,IAAIb,cAAJ,CAAmBC,SAAnB,CAHkB;AAIxByD,wBAAQC,IAAR,EAAc;AACZ,yBACEA,KAAKC,aAAL,IACA5E,+BACEkE,IADF,EAEE,GAAGS,KAAKC,aAFV,CAFF;AAOD;AAZuB,eAA1B;AAcD;AACD,mBAAOZ,MAAP;AACD;AAhDH,SAFgB,EAoDhB;AACEa,2BAAiBlD,KADnB;AAEEmD,uBAAanD,MAAM8B,YAFrB;AAGEsB,4BAAkB,CAACpD,MAAM8B;AAH3B,SApDgB,CAAlB;AA0DAG,WAAGC,SAAH;AACA,cAAMmB,gBAAgB,EAAtB;AACA9E,qBACEiB,sBADF,EAEE;AACE2C,uBAAc,sCAAqCV,aAAc,IADnE;AAEEE,gBAAMjE,WAAW4F,SAAX,CAAqBpB,SAArB,CAFR;AAGEG,kBAAQkB,WAAW;AACjBtE,yBAAagB,YAAYM,EAAzB,IAA+B;AAC7BS,mBAAK7C,KAAKA,CADmB;AAE7BqF,qBAAOC,OAAO;AACZ,uBAAOhF,IAAIkE,QAAS,OAAMlE,IAAImE,IAAJ,CACxBzB,WAAWH,GAAX,CAAeK,QAAQ;AACrB,sBAAI,CAAC5B,eAAe4B,IAAf,EAAqBjD,KAArB,EAA4BmF,OAA5B,CAAL,EAA2C;AACzC,2BAAO9E,IAAIiF,IAAX,CADyC,CACxB;AAClB;AACD,wBAAMC,YAAYjG,WAAWkG,MAAX,CAChBvC,KAAKM,IADW,EAEhB3B,MAAM2B,IAFU,EAGhB3B,MAAM4B,aAHU,CAAlB;AAKA,wBAAMiC,eAAeR,cAAcM,SAAd,CAArB;AACA,wBAAMG,IAAIL,IAAIE,SAAJ,CAAV;AACA,sBAAIE,gBAAgBC,KAAK,IAAzB,EAA+B;AAC7B,0BAAM,EAAE5D,IAAF,KAAW2D,YAAjB;AACA,2BAAOpF,IAAIkE,QAAS,GAAEzD,OACpB4E,CADoB,EAEpB5D,IAFoB,CAGpB,KAAIzB,IAAIqE,UAAJ,CAAe5C,KAAK0B,aAApB,EAAmC1B,KAAKyB,IAAxC,CAA8C,EAHpD;AAID,mBAND,MAMO;AACL,2BAAOlD,IAAIiF,IAAX,CADK,CACY;AAClB;AACF,iBApBD,CADwB,EAsBxB,GAtBwB,CAuBxB,MAAKjF,IAAIqE,UAAJ,CACL7C,YAAY2B,aADP,EAEL3B,YAAY0B,IAFP,CAGL,EA1BF;AA2BD;AA9B4B,aAA/B;AAgCA,mBAAO,EAAP;AACD;AArCH,SAFF,EAyCE;AACEuB,2BAAiBlD,KADnB;AAEE+D,uBAAa,IAFf;AAGEZ,uBAAanD,MAAM8B,YAHrB;AAIEsB,4BAAkB,CAACpD,MAAM8B,YAJ3B;AAKEkC,wBAAcL,SAAd,EAAyBM,QAAzB,EAAmCC,MAAnC,EAA2CC,IAA3C,EAAiD;AAC/Cd,0BAAcM,SAAd,IAA2B;AACzBhC,oBAAMsC,QADmB;AAEzB/D,oBAAMgE;AAFmB,aAA3B;AAIA,mBAAOC,IAAP;AACD;AAXH,SAzCF;;AAwDA,YAAInE,MAAM8B,YAAV,EAAwB;AACtB;AACAvD,uBACEiB,sBADF,EAEE;AACE2C,yBAAc,+BAA8BV,aAAc,0CAD5D;AAEEE,kBAAMjE,WAAW0G,SAAX,CAAqBlC,SAArB;AAFR,WAFF,EAME;AACEgB,6BAAiBlD,KADnB;AAEEmD,yBAAanD,MAAM8B,YAFrB;AAGEsB,8BAAkB,CAACpD,MAAM8B,YAH3B;AAIEuC,uBAAW,IAJb;AAKEL,0BAAcL,SAAd,EAAyBW,SAAzB,EAAoCC,KAApC,EAA2CJ,IAA3C,EAAiD;AAC/C;AACA,qBAAOA,IAAP;AACD;AARH,WANF;AAiBD;AACD,cAAMK,WAAWjG,aACfa,iBADe,EAEf;AACE+C,uBAAc,OAAMV,aAAc,4BADpC;AAEEE,gBAAMjE,WAAW+G,IAAX,CAAgBvC,UAAUP,IAA1B,CAFR;AAGEU,kBAAQ,CAAC,EAAEqC,cAAF,EAAkBC,6BAAlB,EAAD,KAAuD;AAC7DA,0CAA8B,MAA9B;AACA,mBAAO;AACLC,sBAAQF,eACN,QADM,EAEN,CAAC,EAAEG,gBAAF,EAAD,KAA0B;AACxBA,iCAAiB,OAAO;AACtBC,8BAAY,CAAC,IAAD;AADU,iBAAP,CAAjB;AAGA,uBAAO;AACL3C,+BAAa,iCADR;AAELjC,wBAAML,MAFD;AAGLkD,0BAAQC,IAAR,EAAc;AACZ,2BACEA,KAAK+B,QAAL,IACA7H,OAAO,yBAAe8F,KAAK+B,QAApB,CAAP,CAFF;AAID;AARI,iBAAP;AAUD,eAhBK,EAiBN;AACEC,+BAAe;AADjB,eAjBM,CADH;AAsBLC,oBAAM;AACJ9C,6BAAc,SAAQV,aAAc,4BADhC;AAEJvB,sBAAMR,WACJ,CAAC/B,kCADG,EAEJuE,SAFI,CAFF;AAMJa,wBAAQC,IAAR,EAAc;AACZ,yBAAOpF,cAAcoF,IAAd,CAAP;AACD;AARG;AAtBD,aAAP;AAiCD;AAtCH,SAFe,EA0Cf;AACEkC,sBAAY,IADd;AAEEC,2BAAiB,IAFnB;AAGEC,oBAAUlD,SAHZ;AAIEgB,2BAAiBlD;AAJnB,SA1Ce,CAAjB;AAiDA,cAAMqF,WAAWzG,cAAc,UAAd,CAAjB;AACA;AACAL,qBACEa,iBADF,EAEE;AACE+C,uBAAc,+BAA8BV,aAAc,YAD5D;AAEEE,gBAAMjE,WAAW4H,UAAX,CAAsBpD,UAAUP,IAAhC,CAFR;AAGEU,kBAAQ,CAAC,EAAEsC,6BAAF,EAAD,KAAuC;AAC7CA,0CAA8B,OAA9B;AACAA,0CAA8B,OAA9B;AACAA,0CAA8B,UAA9B;AACA,mBAAO;AACLY,qBAAO;AACLpD,6BAAc,eAAcV,aAAc,aADrC;AAELvB,sBAAM,IAAIb,cAAJ,CACJ,IAAIE,WAAJ,CACEG,WACE,CAAC/B,kCADH,EAEEuE,SAFF,CADF,CADI,CAFD;AAULa,wBAAQC,IAAR,EAAc;AACZ,yBAAOA,KAAKA,IAAL,CAAUhC,GAAV,CAAcpD,aAAd,CAAP;AACD;AAZI,eADF;AAeL4H,qBAAO;AACLrD,6BAAc,wCAAuCV,aAAc,qCAD9D;AAELvB,sBAAM,IAAIb,cAAJ,CACJ,IAAIE,WAAJ,CAAgB,IAAIF,cAAJ,CAAmBmF,QAAnB,CAAhB,CADI,CAFD;AAKLzB,wBAAQC,IAAR,EAAc;AACZ,yBAAOA,KAAKA,IAAZ;AACD;AAPI,eAfF;AAwBLyC,wBAAUJ,YAAY;AACpBlD,6BAAa,mCADO;AAEpBjC,sBAAM,IAAIb,cAAJ,CAAmBgG,QAAnB,CAFc;AAGpBtC,wBAAQC,IAAR,EAAc;AACZ,yBAAOA,IAAP;AACD;AALmB;AAxBjB,aAAP;AAgCD;AAvCH,SAFF,EA2CE;AACE0C,4BAAkB,IADpB;AAEEC,iCAAuB,IAFzB;AAGEC,oBAAUpB,QAHZ;AAIEY,oBAAUlD,SAJZ;AAKEgB,2BAAiBlD;AALnB,SA3CF;AAmDD,OAzPH,EA0PE,IA1PF;AA4PAhB,qCACEiB,YAAYM,EADd,EAEE,MAAM;AACJ,cAAM2B,YAAYrD,qBAAqBoB,YAAYM,EAAjC,CAAlB;AACA,eAAO3B,cAAclB,WAAW4F,SAAX,CAAqBpB,SAArB,CAAd,CAAP;AACD,OALH,EAME,IANF;;AASA,UAAIzB,gBAAJ,EAAsB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA1B,kCACE0B,iBAAiBF,EADnB,EAEE,MAAM;AACJ,gBAAM2B,YAAYrD,qBAAqBoB,YAAYM,EAAjC,CAAlB;AACA,iBAAO,IAAIhB,WAAJ,CAAgB2C,SAAhB,CAAP;AACD,SALH,EAME,IANF;AAQAlD,uCACEyB,iBAAiBF,EADnB,EAEE,MAAM;AACJ,gBAAMsF,iBAAiB/G,0BAA0BmB,YAAYM,EAAtC,CAAvB;AACA,iBAAO,IAAIhB,WAAJ,CAAgBsG,cAAhB,CAAP;AACD,SALH,EAME,IANF;AAQD;AACF,KAjVD;AAkVA,WAAO1H,CAAP;AACD,GA7WD;AA8WD,C","file":"PgTablesPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nconst base64 = str => new Buffer(String(str)).toString(\"base64\");\n\nexport default (function PgTablesPlugin(\n  builder,\n  { pgInflection: inflection, pgForbidSetofFunctionsToReturnNull = false }\n) {\n  const handleNullRow = pgForbidSetofFunctionsToReturnNull\n    ? row => row\n    : row => {\n        if (\n          Object.keys(row)\n            .filter(str => !str.startsWith(\"__\"))\n            .some(key => row[key] !== null)\n        ) {\n          return row;\n        } else {\n          return null;\n        }\n      };\n\n  builder.hook(\"init\", (_, build) => {\n    const {\n      getNodeIdForTypeAndIdentifiers,\n      nodeIdFieldName,\n      newWithHooks,\n      pgSql: sql,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      getTypeByName,\n      pgGetGqlTypeByTypeId,\n      pgGetGqlInputTypeByTypeId,\n      pgRegisterGqlTypeByTypeId,\n      pgRegisterGqlInputTypeByTypeId,\n      pg2GqlMapper,\n      gql2pg,\n      graphql: {\n        GraphQLObjectType,\n        GraphQLNonNull,\n        GraphQLID,\n        GraphQLList,\n        GraphQLInputObjectType,\n      },\n      pgColumnFilter,\n    } = build;\n    const nullableIf = (condition, Type) =>\n      condition ? Type : new GraphQLNonNull(Type);\n    const Cursor = getTypeByName(\"Cursor\");\n    introspectionResultsByKind.class.forEach(table => {\n      const tablePgType = introspectionResultsByKind.type.find(\n        type =>\n          type.type === \"c\" &&\n          type.category === \"C\" &&\n          type.namespaceId === table.namespaceId &&\n          type.classId === table.id\n      );\n      if (!tablePgType) {\n        throw new Error(\"Could not determine the type for this table\");\n      }\n      const arrayTablePgType = introspectionResultsByKind.type.find(\n        type => type.arrayItemTypeId === tablePgType.id\n      );\n      /*\n        table =\n          { kind: 'class',\n            id: '6484790',\n            name: 'bundle',\n            description: null,\n            namespaceId: '6484381',\n            typeId: '6484792',\n            isSelectable: true,\n            isInsertable: true,\n            isUpdatable: true,\n            isDeletable: true }\n        */\n      const primaryKeyConstraint = introspectionResultsByKind.constraint\n        .filter(con => con.classId === table.id)\n        .filter(con => con.type === \"p\")[0];\n      const primaryKeys =\n        primaryKeyConstraint &&\n        primaryKeyConstraint.keyAttributeNums.map(\n          num =>\n            introspectionResultsByKind.attributeByClassIdAndNum[table.id][num]\n        );\n      const attributes = introspectionResultsByKind.attribute\n        .filter(attr => attr.classId === table.id)\n        .sort((a1, a2) => a1.num - a2.num);\n      const tableTypeName = inflection.tableType(\n        table.name,\n        table.namespaceName\n      );\n      const shouldHaveNodeId: boolean =\n        nodeIdFieldName &&\n        table.isSelectable &&\n        table.namespace &&\n        primaryKeys &&\n        primaryKeys.length\n          ? true\n          : false;\n      pgRegisterGqlTypeByTypeId(\n        tablePgType.id,\n        cb => {\n          if (pg2GqlMapper[tablePgType.id]) {\n            // Already handled\n            throw new Error(\n              `Register was called but there's already a mapper in place for '${\n                tablePgType.id\n              }'!`\n            );\n          }\n          const TableType = newWithHooks(\n            GraphQLObjectType,\n            {\n              description: table.description || tablePgType.description,\n              name: tableTypeName,\n              interfaces: () => {\n                if (shouldHaveNodeId) {\n                  return [getTypeByName(\"Node\")];\n                } else {\n                  return [];\n                }\n              },\n              fields: ({ addDataGeneratorForField, Self }) => {\n                const fields = {};\n                if (shouldHaveNodeId) {\n                  // Enable nodeId interface\n                  addDataGeneratorForField(nodeIdFieldName, () => {\n                    return {\n                      pgQuery: queryBuilder => {\n                        queryBuilder.select(\n                          sql.fragment`json_build_array(${sql.join(\n                            primaryKeys.map(\n                              key =>\n                                sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                                  key.name\n                                )}`\n                            ),\n                            \", \"\n                          )})`,\n                          \"__identifiers\"\n                        );\n                      },\n                    };\n                  });\n                  fields[nodeIdFieldName] = {\n                    description:\n                      \"A globally unique identifier. Can be used in various places throughout the system to identify this single value.\",\n                    type: new GraphQLNonNull(GraphQLID),\n                    resolve(data) {\n                      return (\n                        data.__identifiers &&\n                        getNodeIdForTypeAndIdentifiers(\n                          Self,\n                          ...data.__identifiers\n                        )\n                      );\n                    },\n                  };\n                }\n                return fields;\n              },\n            },\n            {\n              pgIntrospection: table,\n              isPgRowType: table.isSelectable,\n              isPgCompoundType: !table.isSelectable,\n            }\n          );\n          cb(TableType);\n          const pgInputFields = {};\n          newWithHooks(\n            GraphQLInputObjectType,\n            {\n              description: `An input for mutations affecting \\`${tableTypeName}\\``,\n              name: inflection.inputType(TableType),\n              fields: context => {\n                pg2GqlMapper[tablePgType.id] = {\n                  map: _ => _,\n                  unmap: obj => {\n                    return sql.fragment`row(${sql.join(\n                      attributes.map(attr => {\n                        if (!pgColumnFilter(attr, build, context)) {\n                          return sql.null; // TODO: return default instead.\n                        }\n                        const fieldName = inflection.column(\n                          attr.name,\n                          table.name,\n                          table.namespaceName\n                        );\n                        const pgInputField = pgInputFields[fieldName];\n                        const v = obj[fieldName];\n                        if (pgInputField && v != null) {\n                          const { type } = pgInputField;\n                          return sql.fragment`${gql2pg(\n                            v,\n                            type\n                          )}::${sql.identifier(type.namespaceName, type.name)}`;\n                        } else {\n                          return sql.null; // TODO: return default instead.\n                        }\n                      }),\n                      \",\"\n                    )})::${sql.identifier(\n                      tablePgType.namespaceName,\n                      tablePgType.name\n                    )}`;\n                  },\n                };\n                return {};\n              },\n            },\n            {\n              pgIntrospection: table,\n              isInputType: true,\n              isPgRowType: table.isSelectable,\n              isPgCompoundType: !table.isSelectable,\n              pgAddSubfield(fieldName, attrName, pgType, spec) {\n                pgInputFields[fieldName] = {\n                  name: attrName,\n                  type: pgType,\n                };\n                return spec;\n              },\n            }\n          );\n\n          if (table.isSelectable) {\n            /* const TablePatchType = */\n            newWithHooks(\n              GraphQLInputObjectType,\n              {\n                description: `Represents an update to a \\`${tableTypeName}\\`. Fields that are set will be updated.`,\n                name: inflection.patchType(TableType),\n              },\n              {\n                pgIntrospection: table,\n                isPgRowType: table.isSelectable,\n                isPgCompoundType: !table.isSelectable,\n                isPgPatch: true,\n                pgAddSubfield(fieldName, _attrName, _type, spec) {\n                  // We don't use this currently\n                  return spec;\n                },\n              }\n            );\n          }\n          const EdgeType = newWithHooks(\n            GraphQLObjectType,\n            {\n              description: `A \\`${tableTypeName}\\` edge in the connection.`,\n              name: inflection.edge(TableType.name),\n              fields: ({ fieldWithHooks, recurseDataGeneratorsForField }) => {\n                recurseDataGeneratorsForField(\"node\");\n                return {\n                  cursor: fieldWithHooks(\n                    \"cursor\",\n                    ({ addDataGenerator }) => {\n                      addDataGenerator(() => ({\n                        usesCursor: [true],\n                      }));\n                      return {\n                        description: \"A cursor for use in pagination.\",\n                        type: Cursor,\n                        resolve(data) {\n                          return (\n                            data.__cursor &&\n                            base64(JSON.stringify(data.__cursor))\n                          );\n                        },\n                      };\n                    },\n                    {\n                      isCursorField: true,\n                    }\n                  ),\n                  node: {\n                    description: `The \\`${tableTypeName}\\` at the end of the edge.`,\n                    type: nullableIf(\n                      !pgForbidSetofFunctionsToReturnNull,\n                      TableType\n                    ),\n                    resolve(data) {\n                      return handleNullRow(data);\n                    },\n                  },\n                };\n              },\n            },\n            {\n              isEdgeType: true,\n              isPgRowEdgeType: true,\n              nodeType: TableType,\n              pgIntrospection: table,\n            }\n          );\n          const PageInfo = getTypeByName(\"PageInfo\");\n          /*const ConnectionType = */\n          newWithHooks(\n            GraphQLObjectType,\n            {\n              description: `A connection to a list of \\`${tableTypeName}\\` values.`,\n              name: inflection.connection(TableType.name),\n              fields: ({ recurseDataGeneratorsForField }) => {\n                recurseDataGeneratorsForField(\"edges\");\n                recurseDataGeneratorsForField(\"nodes\");\n                recurseDataGeneratorsForField(\"pageInfo\");\n                return {\n                  nodes: {\n                    description: `A list of \\`${tableTypeName}\\` objects.`,\n                    type: new GraphQLNonNull(\n                      new GraphQLList(\n                        nullableIf(\n                          !pgForbidSetofFunctionsToReturnNull,\n                          TableType\n                        )\n                      )\n                    ),\n                    resolve(data) {\n                      return data.data.map(handleNullRow);\n                    },\n                  },\n                  edges: {\n                    description: `A list of edges which contains the \\`${tableTypeName}\\` and cursor to aid in pagination.`,\n                    type: new GraphQLNonNull(\n                      new GraphQLList(new GraphQLNonNull(EdgeType))\n                    ),\n                    resolve(data) {\n                      return data.data;\n                    },\n                  },\n                  pageInfo: PageInfo && {\n                    description: \"Information to aid in pagination.\",\n                    type: new GraphQLNonNull(PageInfo),\n                    resolve(data) {\n                      return data;\n                    },\n                  },\n                };\n              },\n            },\n            {\n              isConnectionType: true,\n              isPgRowConnectionType: true,\n              edgeType: EdgeType,\n              nodeType: TableType,\n              pgIntrospection: table,\n            }\n          );\n        },\n        true\n      );\n      pgRegisterGqlInputTypeByTypeId(\n        tablePgType.id,\n        () => {\n          const TableType = pgGetGqlTypeByTypeId(tablePgType.id);\n          return getTypeByName(inflection.inputType(TableType));\n        },\n        true\n      );\n\n      if (arrayTablePgType) {\n        // Note: these do not return\n        //\n        // `new GraphQLList(new GraphQLNonNull(...))`\n        //\n        // because it's possible to return null entries from postgresql\n        // functions. We should probably add a flag to instead export\n        // the non-null version as that's more typical.\n        pgRegisterGqlTypeByTypeId(\n          arrayTablePgType.id,\n          () => {\n            const TableType = pgGetGqlTypeByTypeId(tablePgType.id);\n            return new GraphQLList(TableType);\n          },\n          true\n        );\n        pgRegisterGqlInputTypeByTypeId(\n          arrayTablePgType.id,\n          () => {\n            const TableInputType = pgGetGqlInputTypeByTypeId(tablePgType.id);\n            return new GraphQLList(TableInputType);\n          },\n          true\n        );\n      }\n    });\n    return _;\n  });\n}: Plugin);\n"]}