{"version":3,"sources":["../../src/plugins/PgOrderAllColumnsPlugin.js"],"names":["PgOrderAllColumnsPlugin","builder","pgInflection","inflection","hook","values","build","context","extend","pgIntrospectionResultsByKind","introspectionResultsByKind","pgColumnFilter","scope","isPgRowSortEnum","pgIntrospection","table","kind","attribute","filter","attr","classId","id","reduce","memo","ascFieldName","orderByEnum","name","namespaceName","descFieldName","value","alias","toLowerCase","specs"],"mappings":";;;;;;kBAGgB,SAASA,uBAAT,CACdC,OADc,EAEd,EAAEC,cAAcC,UAAhB,EAFc,EAGd;AACAF,UAAQG,IAAR,CAAa,wBAAb,EAAuC,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AACjE,UAAM;AACJC,YADI;AAEJC,oCAA8BC,0BAF1B;AAGJC;AAHI,QAIFL,KAJJ;AAKA,UAAM,EAAEM,OAAO,EAAEC,eAAF,EAAmBC,iBAAiBC,KAApC,EAAT,KAAyDR,OAA/D;AACA,QAAI,CAACM,eAAD,IAAoB,CAACE,KAArB,IAA8BA,MAAMC,IAAN,KAAe,OAAjD,EAA0D;AACxD,aAAOX,MAAP;AACD;AACD,WAAOG,OACLH,MADK,EAELK,2BAA2BO,SAA3B,CACGC,MADH,CACUC,QAAQA,KAAKC,OAAL,KAAiBL,MAAMM,EADzC,EAEGH,MAFH,CAEUC,QAAQR,eAAeQ,IAAf,EAAqBb,KAArB,EAA4BC,OAA5B,CAFlB,EAGGe,MAHH,CAGU,CAACC,IAAD,EAAOJ,IAAP,KAAgB;AACtB,YAAMK,eAAerB,WAAWsB,WAAX,CACnBN,KAAKO,IADc,EAEnB,IAFmB,EAGnBX,MAAMW,IAHa,EAInBX,MAAMY,aAJa,CAArB;AAMA,YAAMC,gBAAgBzB,WAAWsB,WAAX,CACpBN,KAAKO,IADe,EAEpB,KAFoB,EAGpBX,MAAMW,IAHc,EAIpBX,MAAMY,aAJc,CAAtB;AAMAJ,WAAKC,YAAL,IAAqB;AACnBK,eAAO;AACLC,iBAAON,aAAaO,WAAb,EADF;AAELC,iBAAO,CAAC,CAACb,KAAKO,IAAN,EAAY,IAAZ,CAAD;AAFF;AADY,OAArB;AAMAH,WAAKK,aAAL,IAAsB;AACpBC,eAAO;AACLC,iBAAOF,cAAcG,WAAd,EADF;AAELC,iBAAO,CAAC,CAACb,KAAKO,IAAN,EAAY,KAAZ,CAAD;AAFF;AADa,OAAtB;AAMA,aAAOH,IAAP;AACD,KA7BH,EA6BK,EA7BL,CAFK,EAgCJ,mCAAkCR,MAAMW,IAAK,GAhCzC,CAAP;AAkCD,GA5CD;AA6CD,C","file":"PgOrderAllColumnsPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgOrderAllColumnsPlugin(\n  builder,\n  { pgInflection: inflection }\n) {\n  builder.hook(\"GraphQLEnumType:values\", (values, build, context) => {\n    const {\n      extend,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgColumnFilter,\n    } = build;\n    const { scope: { isPgRowSortEnum, pgIntrospection: table } } = context;\n    if (!isPgRowSortEnum || !table || table.kind !== \"class\") {\n      return values;\n    }\n    return extend(\n      values,\n      introspectionResultsByKind.attribute\n        .filter(attr => attr.classId === table.id)\n        .filter(attr => pgColumnFilter(attr, build, context))\n        .reduce((memo, attr) => {\n          const ascFieldName = inflection.orderByEnum(\n            attr.name,\n            true,\n            table.name,\n            table.namespaceName\n          );\n          const descFieldName = inflection.orderByEnum(\n            attr.name,\n            false,\n            table.name,\n            table.namespaceName\n          );\n          memo[ascFieldName] = {\n            value: {\n              alias: ascFieldName.toLowerCase(),\n              specs: [[attr.name, true]],\n            },\n          };\n          memo[descFieldName] = {\n            value: {\n              alias: descFieldName.toLowerCase(),\n              specs: [[attr.name, false]],\n            },\n          };\n          return memo;\n        }, {}),\n      `Adding order values from table '${table.name}'`\n    );\n  });\n}: Plugin);\n"]}