{"version":3,"sources":["../../src/plugins/PgComputedColumnsPlugin.js"],"names":["PgComputedColumnsPlugin","builder","hook","fields","build","scope","isPgRowType","isPgCompoundType","isInputType","pgIntrospection","table","fieldWithHooks","Self","kind","namespace","extend","pgIntrospectionResultsByKind","introspectionResultsByKind","pgInflection","inflection","tableType","type","filter","namespaceId","classId","id","Error","procedure","proc","isStable","name","startsWith","argTypeIds","length","reduce","memo","argTypes","map","typeId","typeById","slice","some","class","isSelectable","pseudoColumnName","substr","fieldName","column","computed"],"mappings":";;;;;;AACA;;;;;;kBAIgB,SAASA,uBAAT,CAAiCC,OAAjC,EAA0C;AACxDA,UAAQC,IAAR,CACE,0BADF,EAEE,CACEC,MADF,EAEEC,KAFF,EAGE;AACEC,WAAO;AACLC,iBADK;AAELC,sBAFK;AAGLC,iBAHK;AAILC,uBAAiBC;AAJZ,KADT;AAOEC,kBAPF;AAQEC;AARF,GAHF,KAaK;AACH,QACEJ,eACA,EAAEF,eAAeC,gBAAjB,CADA,IAEA,CAACG,KAFD,IAGAA,MAAMG,IAAN,KAAe,OAHf,IAIA,CAACH,MAAMI,SALT,EAME;AACA,aAAOX,MAAP;AACD;AACD,UAAM;AACJY,YADI;AAEJC,oCAA8BC,0BAF1B;AAGJC,oBAAcC;AAHV,QAIFf,KAJJ;AAKA,UAAMgB,YAAYH,2BAA2BI,IAA3B,CAAgCC,MAAhC,CAChBD,QACEA,KAAKA,IAAL,KAAc,GAAd,IACAA,KAAKE,WAAL,KAAqBb,MAAMa,WAD3B,IAEAF,KAAKG,OAAL,KAAiBd,MAAMe,EAJT,EAKhB,CALgB,CAAlB;AAMA,QAAI,CAACL,SAAL,EAAgB;AACd,YAAM,IAAIM,KAAJ,CAAU,6CAAV,CAAN;AACD;AACD,WAAOX,OACLZ,MADK,EAELc,2BAA2BU,SAA3B,CACGL,MADH,CACUM,QAAQA,KAAKC,QADvB,EAEGP,MAFH,CAEUM,QAAQA,KAAKL,WAAL,KAAqBb,MAAMa,WAF7C,EAGGD,MAHH,CAGUM,QAAQA,KAAKE,IAAL,CAAUC,UAAV,CAAsB,GAAErB,MAAMoB,IAAK,GAAnC,CAHlB,EAIGR,MAJH,CAIUM,QAAQA,KAAKI,UAAL,CAAgBC,MAAhB,GAAyB,CAJ3C,EAKGX,MALH,CAKUM,QAAQA,KAAKI,UAAL,CAAgB,CAAhB,MAAuBZ,UAAUK,EALnD,EAMGS,MANH,CAMU,CAACC,IAAD,EAAOP,IAAP,KAAgB;AACtB;;;;;;;;;;;;;;AAcA,YAAMQ,WAAWR,KAAKI,UAAL,CAAgBK,GAAhB,CACfC,UAAUrB,2BAA2BsB,QAA3B,CAAoCD,MAApC,CADK,CAAjB;AAGA,UACEF,SACGI,KADH,CACS,CADT,EAEGC,IAFH,CAGIpB,QACEA,KAAKA,IAAL,KAAc,GAAd,IAAqBA,KAAKqB,KAA1B,IAAmCrB,KAAKqB,KAAL,CAAWC,YAJpD,CADF,EAOE;AACA;AACA,eAAOR,IAAP;AACD;;AAED,YAAMS,mBAAmBhB,KAAKE,IAAL,CAAUe,MAAV,CAAiBnC,MAAMoB,IAAN,CAAWG,MAAX,GAAoB,CAArC,CAAzB;AACA,YAAMa,YAAY3B,WAAW4B,MAAX,CAChBH,gBADgB,EAEhBlC,MAAMoB,IAFU,EAGhBpB,MAAMI,SAAN,CAAgBgB,IAHA,CAAlB;AAKAK,WAAKW,SAAL,IAAkB,6BAAcA,SAAd,EAAyBlB,IAAzB,EAA+BxB,KAA/B,EAAsC;AACtDO,sBADsD;AAEtDqC,kBAAU;AAF4C,OAAtC,CAAlB;AAIA,aAAOb,IAAP;AACD,KA/CH,EA+CK,EA/CL,CAFK,EAkDJ,8BAA6BvB,KAAKkB,IAAK,GAlDnC,CAAP;AAoDD,GA3FH;AA6FD,C","file":"PgComputedColumnsPlugin.js","sourcesContent":["// @flow\nimport makeProcField from \"./makeProcField\";\n\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgComputedColumnsPlugin(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields,\n      build,\n      {\n        scope: {\n          isPgRowType,\n          isPgCompoundType,\n          isInputType,\n          pgIntrospection: table,\n        },\n        fieldWithHooks,\n        Self,\n      }\n    ) => {\n      if (\n        isInputType ||\n        !(isPgRowType || isPgCompoundType) ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace\n      ) {\n        return fields;\n      }\n      const {\n        extend,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgInflection: inflection,\n      } = build;\n      const tableType = introspectionResultsByKind.type.filter(\n        type =>\n          type.type === \"c\" &&\n          type.namespaceId === table.namespaceId &&\n          type.classId === table.id\n      )[0];\n      if (!tableType) {\n        throw new Error(\"Could not determine the type for this table\");\n      }\n      return extend(\n        fields,\n        introspectionResultsByKind.procedure\n          .filter(proc => proc.isStable)\n          .filter(proc => proc.namespaceId === table.namespaceId)\n          .filter(proc => proc.name.startsWith(`${table.name}_`))\n          .filter(proc => proc.argTypeIds.length > 0)\n          .filter(proc => proc.argTypeIds[0] === tableType.id)\n          .reduce((memo, proc) => {\n            /*\n            proc =\n              { kind: 'procedure',\n                name: 'integration_webhook_secret',\n                description: null,\n                namespaceId: '6484381',\n                isStrict: false,\n                returnsSet: false,\n                isStable: true,\n                returnTypeId: '2950',\n                argTypeIds: [ '6484569' ],\n                argNames: [ 'integration' ],\n                argDefaultsNum: 0 }\n            */\n            const argTypes = proc.argTypeIds.map(\n              typeId => introspectionResultsByKind.typeById[typeId]\n            );\n            if (\n              argTypes\n                .slice(1)\n                .some(\n                  type =>\n                    type.type === \"c\" && type.class && type.class.isSelectable\n                )\n            ) {\n              // Accepts two input tables? Skip.\n              return memo;\n            }\n\n            const pseudoColumnName = proc.name.substr(table.name.length + 1);\n            const fieldName = inflection.column(\n              pseudoColumnName,\n              table.name,\n              table.namespace.name\n            );\n            memo[fieldName] = makeProcField(fieldName, proc, build, {\n              fieldWithHooks,\n              computed: true,\n            });\n            return memo;\n          }, {}),\n        `Adding computed column to '${Self.name}'`\n      );\n    }\n  );\n}: Plugin);\n"]}