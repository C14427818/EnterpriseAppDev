{"version":3,"sources":["../../src/plugins/PgScalarFunctionConnectionPlugin.js"],"names":["base64","str","Buffer","String","toString","PgTablesPlugin","builder","pgInflection","inflection","pgForbidSetofFunctionsToReturnNull","hook","_","newWithHooks","pgIntrospectionResultsByKind","introspectionResultsByKind","getTypeByName","pgGetGqlTypeByTypeId","graphql","GraphQLObjectType","GraphQLNonNull","GraphQLList","GraphQLString","nullableIf","condition","Type","Cursor","procedure","filter","proc","returnsSet","namespace","forEach","returnType","typeById","returnTypeId","returnTypeTable","classById","classId","NodeType","id","EdgeType","name","scalarFunctionEdge","description","fields","fieldWithHooks","cursor","addDataGenerator","usesCursor","type","resolve","data","__cursor","isCursorField","node","value","isEdgeType","nodeType","pgIntrospection","scalarFunctionConnection","recurseDataGeneratorsForField","nodes","map","entry","edges","isConnectionType","edgeType"],"mappings":"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","file":"PgScalarFunctionConnectionPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nconst base64 = str => new Buffer(String(str)).toString(\"base64\");\n\nexport default (function PgTablesPlugin(\n  builder,\n  { pgInflection: inflection, pgForbidSetofFunctionsToReturnNull = false }\n) {\n  builder.hook(\n    \"init\",\n    (\n      _,\n      {\n        newWithHooks,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        getTypeByName,\n        pgGetGqlTypeByTypeId,\n        graphql: {\n          GraphQLObjectType,\n          GraphQLNonNull,\n          GraphQLList,\n          GraphQLString,\n        },\n      }\n    ) => {\n      const nullableIf = (condition, Type) =>\n        condition ? Type : new GraphQLNonNull(Type);\n      const Cursor = getTypeByName(\"Cursor\");\n      introspectionResultsByKind.procedure\n        .filter(proc => proc.returnsSet)\n        .filter(proc => !!proc.namespace)\n        .forEach(proc => {\n          const returnType =\n            introspectionResultsByKind.typeById[proc.returnTypeId];\n          const returnTypeTable =\n            introspectionResultsByKind.classById[returnType.classId];\n          if (returnTypeTable) {\n            // Just use the standard table connection from PgTablesPlugin\n            return;\n          }\n          const NodeType = pgGetGqlTypeByTypeId(returnType.id) || GraphQLString;\n          const EdgeType = newWithHooks(\n            GraphQLObjectType,\n            {\n              name: inflection.scalarFunctionEdge(\n                proc.name,\n                proc.namespace.name\n              ),\n              description: `A \\`${NodeType.name}\\` edge in the connection.`,\n              fields: ({ fieldWithHooks }) => {\n                return {\n                  cursor: fieldWithHooks(\n                    \"cursor\",\n                    ({ addDataGenerator }) => {\n                      addDataGenerator(() => ({\n                        usesCursor: [true],\n                      }));\n                      return {\n                        description: \"A cursor for use in pagination.\",\n                        type: Cursor,\n                        resolve(data) {\n                          return base64(JSON.stringify(data.__cursor));\n                        },\n                      };\n                    },\n                    {\n                      isCursorField: true,\n                    }\n                  ),\n                  node: {\n                    description: `The \\`${\n                      NodeType.name\n                    }\\` at the end of the edge.`,\n                    type: NodeType,\n                    resolve(data) {\n                      return data.value;\n                    },\n                  },\n                };\n              },\n            },\n            {\n              isEdgeType: true,\n              nodeType: NodeType,\n              pgIntrospection: proc,\n            }\n          );\n          /*const ConnectionType = */\n          newWithHooks(\n            GraphQLObjectType,\n            {\n              name: inflection.scalarFunctionConnection(\n                proc.name,\n                proc.namespace.name\n              ),\n              description: `A connection to a list of \\`${\n                NodeType.name\n              }\\` values.`,\n              fields: ({ recurseDataGeneratorsForField }) => {\n                recurseDataGeneratorsForField(\"edges\");\n                recurseDataGeneratorsForField(\"nodes\");\n                return {\n                  nodes: {\n                    description: `A list of \\`${NodeType.name}\\` objects.`,\n                    type: new GraphQLNonNull(\n                      new GraphQLList(\n                        nullableIf(\n                          !pgForbidSetofFunctionsToReturnNull,\n                          NodeType\n                        )\n                      )\n                    ),\n                    resolve(data) {\n                      return data.data.map(entry => entry.value);\n                    },\n                  },\n                  edges: {\n                    description: `A list of edges which contains the \\`${\n                      NodeType.name\n                    }\\` and cursor to aid in pagination.`,\n                    type: new GraphQLNonNull(\n                      new GraphQLList(new GraphQLNonNull(EdgeType))\n                    ),\n                    resolve(data) {\n                      return data.data;\n                    },\n                  },\n                };\n              },\n            },\n            {\n              isConnectionType: true,\n              edgeType: EdgeType,\n              nodeType: NodeType,\n              pgIntrospection: proc,\n            }\n          );\n        });\n      return _;\n    }\n  );\n}: Plugin);\n"]}