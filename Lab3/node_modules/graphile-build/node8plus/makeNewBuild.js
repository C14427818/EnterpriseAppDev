"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _isFrozen = require("babel-runtime/core-js/object/is-frozen");

var _isFrozen2 = _interopRequireDefault(_isFrozen);

var _map = require("babel-runtime/core-js/map");

var _map2 = _interopRequireDefault(_map);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

exports.default = makeNewBuild;

var _graphql = require("graphql");

var graphql = _interopRequireWildcard(_graphql);

var _graphqlParseResolveInfo = require("graphql-parse-resolve-info");

var _debug = require("debug");

var _debug2 = _interopRequireDefault(_debug);

var _extend = require("./extend");

var _extend2 = _interopRequireDefault(_extend);

var _package = require("../package.json");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isString = str => typeof str === "string";

const isDev = ["test", "development"].indexOf(process.env.NODE_ENV) >= 0;
const debug = (0, _debug2.default)("graphile-build");
const debugWarn = (0, _debug2.default)("graphile-build:warn");

function getNameFromType(Type) {
  if (Type instanceof GraphQLSchema) {
    return "schema";
  } else {
    return Type.name;
  }
}

const {
  GraphQLSchema,
  GraphQLObjectType,
  GraphQLInputObjectType,
  GraphQLEnumType,
  getNamedType,
  isCompositeType,
  isAbstractType
} = graphql;

const mergeData = (data, gen, ReturnType, arg) => {
  const results = ensureArray(gen(arg, ReturnType, data));
  if (!results) {
    return;
  }
  for (const result of results) {
    for (const k of (0, _keys2.default)(result)) {
      data[k] = data[k] || [];
      const value = result[k];
      const newData = ensureArray(value);
      if (newData) {
        data[k].push(...newData);
      }
    }
  }
};

const knownTypes = [GraphQLSchema, GraphQLObjectType, GraphQLInputObjectType, GraphQLEnumType];
const knownTypeNames = knownTypes.map(k => k.name);

function ensureArray(val) {
  if (val == null) {
    return;
  } else if (Array.isArray(val)) {
    return val;
  } else {
    return [val];
  }
}

// eslint-disable-next-line no-unused-vars
let ensureName = fn => {};
if (["development", "test"].indexOf(process.env.NODE_ENV) >= 0) {
  ensureName = fn => {
    if (isDev && !fn.displayName && !fn.name && debug.enabled) {
      // eslint-disable-next-line no-console
      console.trace("WARNING: you've added a function with no name as an argDataGenerator, doing so may make debugging more challenging");
    }
  };
}

function makeNewBuild(builder) {
  const allTypes = {};

  // Every object type gets fieldData associated with each of its
  // fields.

  // When a field is defined, it may add to this field data.

  // When something resolves referencing this type, the resolver may
  // request the fieldData, e.g. to perform optimisations.

  // fieldData is an object whose keys are the fields on this
  // GraphQLObjectType and whose values are an object (whose keys are
  // arbitrary namespaced keys and whose values are arrays of
  // information of this kind)
  const fieldDataGeneratorsByFieldNameByType = new _map2.default();
  const fieldArgDataGeneratorsByFieldNameByType = new _map2.default();

  return {
    graphileBuildVersion: _package.version,
    graphql,
    parseResolveInfo: _graphqlParseResolveInfo.parseResolveInfo,
    simplifyParsedResolveInfoFragmentWithType: _graphqlParseResolveInfo.simplifyParsedResolveInfoFragmentWithType,
    getAliasFromResolveInfo: _graphqlParseResolveInfo.getAliasFromResolveInfo,
    resolveAlias(data, _args, _context, resolveInfo) {
      const alias = (0, _graphqlParseResolveInfo.getAliasFromResolveInfo)(resolveInfo);
      return data[alias];
    },
    addType(type) {
      if (!type.name) {
        throw new Error(`addType must only be called with named types, try using require('graphql').getNamedType`);
      }
      if (allTypes[type.name] && allTypes[type.name] !== type) {
        throw new Error(`There's already a type with the name: ${type.name}`);
      }
      allTypes[type.name] = type;
    },
    getTypeByName(typeName) {
      return allTypes[typeName];
    },
    extend: _extend2.default,
    newWithHooks(Type, spec, inScope, returnNullOnInvalid = false) {
      const scope = inScope || {};
      if (!inScope) {
        // eslint-disable-next-line no-console
        console.warn(`No scope was provided to new ${Type.name}[name=${spec.name}], it's highly recommended that you add a scope so other hooks can easily reference your object - please check usage of 'newWithHooks'. To mute this message, just pass an empty object.`);
      }
      if (!Type) {
        throw new Error("No type specified!");
      }
      if (!this.newWithHooks || !(0, _isFrozen2.default)(this)) {
        throw new Error("Please do not generate the schema during the build building phase, use 'init' instead");
      }
      const fieldDataGeneratorsByFieldName = {};
      const fieldArgDataGeneratorsByFieldName = {};
      let newSpec = spec;
      if (knownTypes.indexOf(Type) === -1 && knownTypeNames.indexOf(Type.name) >= 0) {
        throw new Error(`GraphQL conflict for '${Type.name}' detected! Multiple versions of graphql exist in your node_modules?`);
      }
      if (Type === GraphQLSchema) {
        newSpec = builder.applyHooks(this, "GraphQLSchema", newSpec, {
          type: "GraphQLSchema",
          scope
        });
      } else if (Type === GraphQLObjectType) {
        const addDataGeneratorForField = (fieldName, fn) => {
          fn.displayName = fn.displayName || `${getNameFromType(Self)}:${fieldName}[${fn.name || "anonymous"}]`;
          fieldDataGeneratorsByFieldName[fieldName] = fieldDataGeneratorsByFieldName[fieldName] || [];
          fieldDataGeneratorsByFieldName[fieldName].push(fn);
        };
        const recurseDataGeneratorsForField = fieldName => {
          const fn = (parsedResolveInfoFragment, ReturnType, ...rest) => {
            const { args } = parsedResolveInfoFragment;
            const { fields } = this.simplifyParsedResolveInfoFragmentWithType(parsedResolveInfoFragment, ReturnType);
            const results = [];
            const StrippedType = getNamedType(ReturnType);
            const fieldDataGeneratorsByFieldName = fieldDataGeneratorsByFieldNameByType.get(StrippedType);
            const argDataGeneratorsForSelfByFieldName = fieldArgDataGeneratorsByFieldNameByType.get(Self);
            if (argDataGeneratorsForSelfByFieldName) {
              const argDataGenerators = argDataGeneratorsForSelfByFieldName[fieldName];
              for (const gen of argDataGenerators) {
                const local = ensureArray(gen(args, ReturnType, ...rest));
                if (local) {
                  results.push(...local);
                }
              }
            }
            if (fieldDataGeneratorsByFieldName && isCompositeType(StrippedType) && !isAbstractType(StrippedType)) {
              const typeFields = StrippedType.getFields();
              for (const alias of (0, _keys2.default)(fields)) {
                const field = fields[alias];
                // Run generators with `field` as the `parsedResolveInfoFragment`, pushing results to `results`
                const gens = fieldDataGeneratorsByFieldName[field.name];
                if (gens) {
                  for (const gen of gens) {
                    const local = ensureArray(gen(field, typeFields[field.name].type, ...rest));
                    if (local) {
                      results.push(...local);
                    }
                  }
                }
              }
            }
            return results;
          };
          fn.displayName = `recurseDataGeneratorsForField(${getNameFromType(Self)}:${fieldName})`;
          addDataGeneratorForField(fieldName, fn);
          // get type from field, get
        };

        const commonContext = {
          type: "GraphQLObjectType",
          scope
        };
        newSpec = builder.applyHooks(this, "GraphQLObjectType", newSpec, (0, _assign2.default)({}, commonContext, {
          addDataGeneratorForField,
          recurseDataGeneratorsForField
        }), `|${newSpec.name}`);

        const rawSpec = newSpec;
        newSpec = (0, _assign2.default)({}, newSpec, {
          interfaces: () => {
            const interfacesContext = (0, _assign2.default)({}, commonContext, {
              Self,
              GraphQLObjectType: rawSpec
            });
            let rawInterfaces = rawSpec.interfaces || [];
            if (typeof rawInterfaces === "function") {
              rawInterfaces = rawInterfaces(interfacesContext);
            }
            return builder.applyHooks(this, "GraphQLObjectType:interfaces", rawInterfaces, interfacesContext, `|${getNameFromType(Self)}`);
          },
          fields: () => {
            const processedFields = [];
            const fieldsContext = (0, _assign2.default)({}, commonContext, {
              addDataGeneratorForField,
              recurseDataGeneratorsForField,
              Self,
              GraphQLObjectType: rawSpec,
              fieldWithHooks: (fieldName, spec, fieldScope) => {
                if (!isString(fieldName)) {
                  throw new Error("It looks like you forgot to pass the fieldName to `fieldWithHooks`, we're sorry this is current necessary.");
                }
                if (!fieldScope) {
                  throw new Error("All calls to `fieldWithHooks` must specify a `fieldScope` " + "argument that gives additional context about the field so " + "that further plugins may more easily understand the field. " + "Keys within this object should contain the phrase 'field' " + "since they will be merged into the parent objects scope and " + "are not allowed to clash. If you really have no additional " + "information to give, please just pass `{}`.");
                }

                let argDataGenerators = [];
                fieldArgDataGeneratorsByFieldName[fieldName] = argDataGenerators;

                let newSpec = spec;
                let context = (0, _assign2.default)({}, commonContext, {
                  Self,
                  addDataGenerator(fn) {
                    return addDataGeneratorForField(fieldName, fn);
                  },
                  addArgDataGenerator(fn) {
                    ensureName(fn);
                    argDataGenerators.push(fn);
                  },
                  getDataFromParsedResolveInfoFragment: (parsedResolveInfoFragment, ReturnType) => {
                    const Type = getNamedType(ReturnType);
                    const data = {};

                    const {
                      fields,
                      args
                    } = this.simplifyParsedResolveInfoFragmentWithType(parsedResolveInfoFragment, ReturnType);

                    // Args -> argDataGenerators
                    for (const gen of argDataGenerators) {
                      try {
                        mergeData(data, gen, ReturnType, args);
                      } catch (e) {
                        debug("Failed to execute argDataGenerator '%s' on %s of %s", gen.displayName || gen.name || "anonymous", fieldName, getNameFromType(Self));
                        throw e;
                      }
                    }

                    // finalSpec.type -> fieldData
                    if (!finalSpec) {
                      throw new Error("It's too early to call this! Call from within resolve");
                    }
                    const fieldDataGeneratorsByFieldName = fieldDataGeneratorsByFieldNameByType.get(Type);
                    if (fieldDataGeneratorsByFieldName && isCompositeType(Type) && !isAbstractType(Type)) {
                      const typeFields = Type.getFields();
                      for (const alias of (0, _keys2.default)(fields)) {
                        const field = fields[alias];
                        const gens = fieldDataGeneratorsByFieldName[field.name];
                        if (gens) {
                          const FieldReturnType = typeFields[field.name].type;
                          for (const gen of gens) {
                            mergeData(data, gen, FieldReturnType, field);
                          }
                        }
                      }
                    }
                    return data;
                  },
                  scope: (0, _extend2.default)((0, _extend2.default)(scope, {
                    fieldName
                  }, `Within context for GraphQLObjectType '${rawSpec.name}'`), fieldScope, `Extending scope for field '${fieldName}' within context for GraphQLObjectType '${rawSpec.name}'`)
                });
                if (typeof newSpec === "function") {
                  newSpec = newSpec(context);
                }
                newSpec = builder.applyHooks(this, "GraphQLObjectType:fields:field", newSpec, context, `|${getNameFromType(Self)}.fields.${fieldName}`);
                newSpec.args = newSpec.args || {};
                newSpec = (0, _assign2.default)({}, newSpec, {
                  args: builder.applyHooks(this, "GraphQLObjectType:fields:field:args", newSpec.args, (0, _assign2.default)({}, context, {
                    field: newSpec,
                    returnType: newSpec.type
                  }), `|${getNameFromType(Self)}.fields.${fieldName}`)
                });
                const finalSpec = newSpec;
                processedFields.push(finalSpec);
                return finalSpec;
              }
            });
            let rawFields = rawSpec.fields || {};
            if (typeof rawFields === "function") {
              rawFields = rawFields(fieldsContext);
            }
            const fieldsSpec = builder.applyHooks(this, "GraphQLObjectType:fields", rawFields, fieldsContext, `|${rawSpec.name}`);
            // Finally, check through all the fields that they've all been processed; any that have not we should do so now.
            for (const fieldName in fieldsSpec) {
              const fieldSpec = fieldsSpec[fieldName];
              if (processedFields.indexOf(fieldSpec) < 0) {
                // We've not processed this yet; process it now!
                fieldsSpec[fieldName] = fieldsContext.fieldWithHooks(fieldName, fieldSpec, {
                  autoField: true // We don't have any additional information
                });
              }
            }
            return fieldsSpec;
          }
        });
      } else if (Type === GraphQLInputObjectType) {
        const commonContext = {
          type: "GraphQLInputObjectType",
          scope
        };
        newSpec = builder.applyHooks(this, "GraphQLInputObjectType", newSpec, commonContext, `|${newSpec.name}`);
        newSpec.fields = newSpec.fields || {};

        const rawSpec = newSpec;
        newSpec = (0, _assign2.default)({}, newSpec, {
          fields: () => {
            const processedFields = [];
            const fieldsContext = (0, _assign2.default)({}, commonContext, {
              Self,
              GraphQLInputObjectType: rawSpec,
              fieldWithHooks: (fieldName, spec, fieldScope = {}) => {
                if (!isString(fieldName)) {
                  throw new Error("It looks like you forgot to pass the fieldName to `fieldWithHooks`, we're sorry this is current necessary.");
                }
                let context = (0, _assign2.default)({}, commonContext, {
                  Self,
                  scope: (0, _extend2.default)((0, _extend2.default)(scope, {
                    fieldName
                  }, `Within context for GraphQLInputObjectType '${rawSpec.name}'`), fieldScope, `Extending scope for field '${fieldName}' within context for GraphQLInputObjectType '${rawSpec.name}'`)
                });
                let newSpec = spec;
                if (typeof newSpec === "function") {
                  newSpec = newSpec(context);
                }
                newSpec = builder.applyHooks(this, "GraphQLInputObjectType:fields:field", newSpec, context, `|${getNameFromType(Self)}.fields.${fieldName}`);
                const finalSpec = newSpec;
                processedFields.push(finalSpec);
                return finalSpec;
              }
            });
            let rawFields = rawSpec.fields;
            if (typeof rawFields === "function") {
              rawFields = rawFields(fieldsContext);
            }
            const fieldsSpec = builder.applyHooks(this, "GraphQLInputObjectType:fields", rawFields, fieldsContext, `|${getNameFromType(Self)}`);
            // Finally, check through all the fields that they've all been processed; any that have not we should do so now.
            for (const fieldName in fieldsSpec) {
              const fieldSpec = fieldsSpec[fieldName];
              if (processedFields.indexOf(fieldSpec) < 0) {
                // We've not processed this yet; process it now!
                fieldsSpec[fieldName] = fieldsContext.fieldWithHooks(fieldName, fieldSpec, {
                  autoField: true // We don't have any additional information
                });
              }
            }
            return fieldsSpec;
          }
        });
      } else if (Type === GraphQLEnumType) {
        const commonContext = {
          type: "GraphQLEnumType",
          scope
        };
        newSpec = builder.applyHooks(this, "GraphQLEnumType", newSpec, commonContext, `|${newSpec.name}`);

        newSpec.values = builder.applyHooks(this, "GraphQLEnumType:values", newSpec.values, commonContext, `|${newSpec.name}`);
        const values = newSpec.values;
        newSpec.values = (0, _keys2.default)(values).reduce((memo, valueKey) => {
          const value = values[valueKey];
          const newValue = builder.applyHooks(this, "GraphQLEnumType:values:value", value, commonContext, `|${newSpec.name}|${valueKey}`);
          memo[valueKey] = newValue;
          return memo;
        }, {});
      }
      const finalSpec = newSpec;

      const Self = new Type(finalSpec);
      if (!(Self instanceof GraphQLSchema) && returnNullOnInvalid) {
        try {
          if (isCompositeType(Self) && !isAbstractType(Self)) {
            Self.getFields();
          }
        } catch (e) {
          // This is the error we're expecting to handle:
          // https://github.com/graphql/graphql-js/blob/831598ba76f015078ecb6c5c1fbaf133302f3f8e/src/type/definition.js#L526-L531
          const isProbablyAnEmptyObjectError = !!e.message.match(/function which returns such an object/);
          if (!isProbablyAnEmptyObjectError) {
            // XXX: Improve this
            // eslint-disable-next-line no-console
            console.warn(`An error occurred, it might be okay but it doesn't look like the error we were expecting... run with envvar 'DEBUG="graphile-build:warn"' to view the error`);
            debugWarn(e);
          }
          return null;
        }
      }

      if (finalSpec.name) {
        if (allTypes[finalSpec.name]) {
          throw new Error(`Type '${finalSpec.name}' has already been registered!`);
        }
        allTypes[finalSpec.name] = Self;
      }
      fieldDataGeneratorsByFieldNameByType.set(Self, fieldDataGeneratorsByFieldName);
      fieldArgDataGeneratorsByFieldNameByType.set(Self, fieldArgDataGeneratorsByFieldName);
      return Self;
    },
    fieldDataGeneratorsByType: fieldDataGeneratorsByFieldNameByType, // @deprecated
    fieldDataGeneratorsByFieldNameByType,
    fieldArgDataGeneratorsByFieldNameByType
  };
}
//# sourceMappingURL=makeNewBuild.js.map