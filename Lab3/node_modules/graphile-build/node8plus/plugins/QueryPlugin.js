"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _symbol = require("babel-runtime/core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = async function QueryPlugin(builder) {
  builder.hook("build", build => build.extend(build, {
    $$isQuery: (0, _symbol2.default)("isQuery")
  }, `Extending Build`));
  builder.hook("GraphQLSchema", (schema, {
    $$isQuery,
    newWithHooks,
    extend,
    graphql: { GraphQLObjectType, GraphQLNonNull }
  }) => {
    const queryType = newWithHooks(GraphQLObjectType, {
      description: "The root query type which gives access points into the data universe.",
      name: "Query",
      isTypeOf: (value, _context, info) => info.parentType == null || value === $$isQuery,
      fields: ({ Self }) => ({
        query: {
          description: "Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.",
          type: new GraphQLNonNull(Self),
          resolve() {
            return $$isQuery;
          }
        }
      })
    }, { isRootQuery: true }, true);
    if (queryType) {
      return extend(schema, {
        query: queryType
      }, `Adding 'query' type to Schema`);
    } else {
      return schema;
    }
  });
};
//# sourceMappingURL=QueryPlugin.js.map