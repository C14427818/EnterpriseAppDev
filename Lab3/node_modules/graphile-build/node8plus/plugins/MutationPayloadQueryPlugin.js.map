{"version":3,"sources":["../../src/plugins/MutationPayloadQueryPlugin.js"],"names":["MutationPayloadQueryPlugin","builder","hook","fields","$$isQuery","extend","getTypeByName","scope","isMutationPayload","Self","Query","query","description","type","resolve","name"],"mappings":";;;;;;kBAIgB,SAASA,0BAAT,CAAoCC,OAApC,EAA6C;AAC3DA,UAAQC,IAAR,CACE,0BADF,EAEE,CACEC,MADF,EAEE;AACEC,aADF;AAEEC,UAFF;AAGEC;AAHF,GAFF,EAOE,EAAEC,OAAO,EAAEC,iBAAF,EAAT,EAAgCC,IAAhC,EAPF,KAQS;AACP,QAAI,CAACD,iBAAL,EAAwB;AACtB,aAAOL,MAAP;AACD;AACD,UAAMO,QAAQJ,cAAc,OAAd,CAAd;AACA,WAAOD,OACLF,MADK,EAEL;AACEQ,aAAO;AACLC,qBACE,kFAFG;AAGLC,cAAMH,KAHD;AAILI,kBAAU;AACR,iBAAOV,SAAP;AACD;AANI;AADT,KAFK,EAYJ,4CAA2CK,KAAKM,IAAK,EAZjD,CAAP;AAcD,GA7BH;AA+BD,C","file":"MutationPayloadQueryPlugin.js","sourcesContent":["// @flow\nimport type { Plugin, Build } from \"../SchemaBuilder\";\nimport type { BuildExtensionQuery } from \"./QueryPlugin\";\n\nexport default (function MutationPayloadQueryPlugin(builder) {\n  builder.hook(\n    \"GraphQLObjectType:fields\",\n    (\n      fields: {},\n      {\n        $$isQuery,\n        extend,\n        getTypeByName,\n      }: {| ...Build, ...BuildExtensionQuery |},\n      { scope: { isMutationPayload }, Self }\n    ): {} => {\n      if (!isMutationPayload) {\n        return fields;\n      }\n      const Query = getTypeByName(\"Query\");\n      return extend(\n        fields,\n        {\n          query: {\n            description:\n              \"Our root query field type. Allows us to run any query from our mutation payload.\",\n            type: Query,\n            resolve() {\n              return $$isQuery;\n            },\n          },\n        },\n        `Adding 'query' field to mutation payload ${Self.name}`\n      );\n    }\n  );\n}: Plugin);\n"]}