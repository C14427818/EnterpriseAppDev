"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = async function PersistentMemoizeToJSONPlugin(builder, { persistentMemoizeToJSONFilePath, persistentMemoizeToJSONMode }) {
  const writeMode = persistentMemoizeToJSONMode === "write";
  const readMode = persistentMemoizeToJSONMode === "read";

  if (persistentMemoizeToJSONMode && !writeMode && !readMode) {
    throw new Error(`Invalid persistentMemoizeToJSONMode setting: ${(0, _stringify2.default)(persistentMemoizeToJSONMode)}`);
  }

  if ((readMode || writeMode) && !persistentMemoizeToJSONFilePath) {
    throw new Error("No 'persistentMemoizeToJSONFilePath' specified");
  }

  if (!readMode && !writeMode) {
    // Nothing to do.
    return;
  }

  const readCacheFromFile = () => new _promise2.default((resolve, reject) => {
    _fs2.default.readFile(persistentMemoizeToJSONFilePath, "utf8", (err, fileContents) => {
      if (err) {
        return reject(err);
      }
      try {
        const parsed = JSON.parse(fileContents);
        return parsed;
      } catch (e) {
        reject(e);
      }
    });
  });

  const writeCacheToFile = obj => new _promise2.default((resolve, reject) => {
    _fs2.default.writeFile(persistentMemoizeToJSONFilePath, (0, _stringify2.default)(obj), err => {
      if (err) {
        return reject(err);
      }
      return resolve();
    });
  });

  const initialCache = persistentMemoizeToJSONFilePath && readMode ? await readCacheFromFile() : {};

  builder.hook("build", build => {
    build.persistentMemoizeWithKeySetState((0, _assign2.default)({}, initialCache));
    return build;
  });

  builder.hook("finalize", (_, build) => {
    writeCacheToFile(build.persistentMemoizeWithKeyGetState());
    return _;
  });
};
//# sourceMappingURL=PersistentMemoizeToJSONPlugin.js.map