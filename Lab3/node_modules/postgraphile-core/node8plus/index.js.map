{"version":3,"sources":["../src/index.js"],"names":["ensureValidPlugins","name","arr","Array","isArray","Error","i","l","length","fn","inflections","postGraphileBaseOverrides","enumName","value","defaultUtils","constantCase","defaultInflection","postGraphileClassicIdsOverrides","column","_table","_schema","camelCase","postGraphileInflection","newInflector","postGraphileClassicIdsInflection","awaitKeys","obj","result","k","getPostGraphileBuilder","pgConfig","schemas","options","dynamicJson","classicIds","nodeIdFieldName","replaceAllPlugins","appendPlugins","prependPlugins","skipPlugins","jwtPgTypeIdentifier","jwtSecret","disableDefaultMutations","graphileBuildOptions","graphqlBuildOptions","inflector","pgColumnFilter","viewUniqueKey","enableTags","readCache","writeCache","setWriteCacheCallback","legacyRelations","setofFunctionsContainNulls","legacyJsonUuid","indexOf","persistentMemoizeWithKey","undefined","memoizeCache","JSON","parse","resolve","reject","readFile","err","data","key","then","writeFile","filter","p","pgSchemas","pgExtendedTypes","pgInflection","pgJwtTypeIdentifier","pgJwtSecret","pgDisableDefaultMutations","pgViewUniqueKey","pgEnableTags","pgLegacyRelations","pgLegacyJsonUuid","pgForbidSetofFunctionsToReturnNull","abort","e","console","error","process","exit","createPostGraphileSchema","builder","schema","buildSchema","catch","watchPostGraphileSchema","onNewSchema","released","handleNewSchema","args","watchSchema","release","unwatchSchema","postGraphQLBaseOverrides","postGraphQLClassicIdsOverrides","postGraphQLInflection","postGraphQLClassicIdsInflection","createPostGraphQLSchema","watchPostGraphQLSchema"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport fs from \"fs\";\nimport { defaultPlugins, getBuilder } from \"graphile-build\";\nimport {\n  defaultPlugins as pgDefaultPlugins,\n  inflections,\n  Inflector,\n} from \"graphile-build-pg\";\nimport type { Pool, Client } from \"pg\";\nimport type { Plugin, Options, SchemaListener } from \"graphile-build\";\nimport type { Build, Context } from \"graphile-build\";\n\nconst ensureValidPlugins = (name, arr) => {\n  if (!Array.isArray(arr)) {\n    throw new Error(`Option '${name}' should be an array`);\n  }\n  for (let i = 0, l = arr.length; i < l; i++) {\n    const fn = arr[i];\n    if (typeof fn !== \"function\") {\n      throw new Error(\n        `Option '${name}' should be an array of functions, found '${typeof fn}' at index ${i}`\n      );\n    }\n  }\n};\n\ntype PostGraphileOptions = {\n  dynamicJson?: boolean,\n  classicIds?: boolean,\n  disableDefaultMutations?: string,\n  nodeIdFieldName?: string,\n  graphileBuildOptions?: Options,\n  graphqlBuildOptions?: Options, // DEPRECATED!\n  replaceAllPlugins?: Array<Plugin>,\n  appendPlugins?: Array<Plugin>,\n  prependPlugins?: Array<Plugin>,\n  skipPlugins?: Array<Plugin>,\n  jwtPgTypeIdentifier?: string,\n  jwtSecret?: string,\n  inflector?: Inflector,\n  pgColumnFilter?: (mixed, Build, Context) => boolean,\n  viewUniqueKey?: string,\n  enableTags?: boolean,\n  readCache?: string,\n  writeCache?: string,\n  setWriteCacheCallback?: (fn: () => Promise<void>) => void,\n  legacyRelations?: \"only\" | \"deprecated\",\n  setofFunctionsContainNulls?: boolean,\n  legacyJsonUuid?: boolean,\n};\n\ntype PgConfig = Client | Pool | string;\n\nexport { inflections };\n\nexport const postGraphileBaseOverrides = {\n  enumName(value: string) {\n    return inflections.defaultUtils.constantCase(\n      inflections.defaultInflection.enumName(value)\n    );\n  },\n};\n\nexport const postGraphileClassicIdsOverrides = {\n  column(name: string, _table: string, _schema: ?string) {\n    return name === \"id\" ? \"rowId\" : inflections.defaultUtils.camelCase(name);\n  },\n};\n\nexport const postGraphileInflection = inflections.newInflector(\n  postGraphileBaseOverrides\n);\n\nexport const postGraphileClassicIdsInflection = inflections.newInflector(\n  Object.assign({}, postGraphileBaseOverrides, postGraphileClassicIdsOverrides)\n);\n\nconst awaitKeys = async obj => {\n  const result = {};\n  for (const k in obj) {\n    result[k] = await obj[k];\n  }\n  return result;\n};\n\nconst getPostGraphileBuilder = async (\n  pgConfig,\n  schemas,\n  options: PostGraphileOptions = {}\n) => {\n  const {\n    dynamicJson,\n    classicIds,\n    nodeIdFieldName,\n    replaceAllPlugins,\n    appendPlugins = [],\n    prependPlugins = [],\n    skipPlugins = [],\n    jwtPgTypeIdentifier,\n    jwtSecret,\n    disableDefaultMutations,\n    graphileBuildOptions,\n    graphqlBuildOptions, // DEPRECATED!\n    inflector,\n    pgColumnFilter,\n    viewUniqueKey,\n    enableTags = true,\n    readCache,\n    writeCache,\n    setWriteCacheCallback,\n    legacyRelations = \"deprecated\", // TODO: Change to 'omit' in v5\n    setofFunctionsContainNulls = true,\n    legacyJsonUuid = false,\n  } = options;\n\n  if (\n    legacyRelations &&\n    [\"only\", \"deprecated\", \"omit\"].indexOf(legacyRelations) < 0\n  ) {\n    throw new Error(\n      \"Invalid configuration for legacy relations: \" +\n        JSON.stringify(legacyRelations)\n    );\n  }\n  if (replaceAllPlugins) {\n    ensureValidPlugins(\"replaceAllPlugins\", replaceAllPlugins);\n    if (\n      (prependPlugins && prependPlugins.length) ||\n      (appendPlugins && appendPlugins.length)\n    ) {\n      throw new Error(\n        \"When using 'replaceAllPlugins' you must not specify 'appendPlugins'/'prependPlugins'\"\n      );\n    }\n  }\n  if (readCache && writeCache) {\n    throw new Error(\"Use `readCache` or `writeCache` - not both.\");\n  }\n\n  let persistentMemoizeWithKey = undefined; // NOT null, otherwise it won't default correctly.\n  let memoizeCache = {};\n\n  if (readCache) {\n    memoizeCache = JSON.parse(\n      await new Promise((resolve, reject) => {\n        fs.readFile(readCache, \"utf8\", (err, data) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(data);\n          }\n        });\n      })\n    );\n  }\n  if (readCache || writeCache) {\n    persistentMemoizeWithKey = (key, fn) => {\n      if (!(key in memoizeCache)) {\n        if (readCache) {\n          throw new Error(`Expected cache to contain key: ${key}`);\n        }\n        memoizeCache[key] = fn();\n        if (memoizeCache[key] === undefined) {\n          throw new Error(`Cannot memoize 'undefined' - use 'null' instead`);\n        }\n      }\n      return memoizeCache[key];\n    };\n  }\n\n  if (writeCache && setWriteCacheCallback) {\n    setWriteCacheCallback(() =>\n      awaitKeys(memoizeCache).then(\n        obj =>\n          new Promise((resolve, reject) => {\n            fs.writeFile(writeCache, JSON.stringify(obj), err => {\n              memoizeCache = {};\n              if (err) {\n                reject(err);\n              } else {\n                resolve();\n              }\n            });\n          })\n      )\n    );\n  } else if (writeCache) {\n    throw new Error(\"Cannot write cache without 'setWriteCacheCallback'\");\n  } else if (setWriteCacheCallback) {\n    setWriteCacheCallback(() => Promise.resolve());\n  }\n\n  ensureValidPlugins(\"prependPlugins\", prependPlugins);\n  ensureValidPlugins(\"appendPlugins\", appendPlugins);\n  ensureValidPlugins(\"skipPlugins\", skipPlugins);\n  return getBuilder(\n    (replaceAllPlugins\n      ? [...prependPlugins, ...replaceAllPlugins, ...appendPlugins]\n      : [\n          ...prependPlugins,\n          ...defaultPlugins,\n          ...pgDefaultPlugins,\n          ...appendPlugins,\n        ]\n    ).filter(p => skipPlugins.indexOf(p) === -1),\n    Object.assign(\n      {\n        pgConfig: pgConfig,\n        pgSchemas: Array.isArray(schemas) ? schemas : [schemas],\n        pgExtendedTypes: !!dynamicJson,\n        pgColumnFilter: pgColumnFilter || (() => true),\n        pgInflection:\n          inflector ||\n          (classicIds\n            ? postGraphileClassicIdsInflection\n            : postGraphileInflection),\n        nodeIdFieldName: nodeIdFieldName || (classicIds ? \"id\" : \"nodeId\"),\n        pgJwtTypeIdentifier: jwtPgTypeIdentifier,\n        pgJwtSecret: jwtSecret,\n        pgDisableDefaultMutations: disableDefaultMutations,\n        pgViewUniqueKey: viewUniqueKey,\n        pgEnableTags: enableTags,\n        pgLegacyRelations: legacyRelations,\n        pgLegacyJsonUuid: legacyJsonUuid,\n        persistentMemoizeWithKey,\n        pgForbidSetofFunctionsToReturnNull: !setofFunctionsContainNulls,\n      },\n      graphileBuildOptions,\n      graphqlBuildOptions // DEPRECATED!\n    )\n  );\n};\n\nfunction abort(e) {\n  /* eslint-disable no-console */\n  console.error(\"Error occured whilst writing cache\");\n  console.error(e);\n  process.exit(1);\n  /* eslint-enable */\n}\n\nexport const createPostGraphileSchema = async (\n  pgConfig: PgConfig,\n  schemas: Array<string> | string,\n  options: PostGraphileOptions = {}\n) => {\n  let writeCache;\n  const builder = await getPostGraphileBuilder(\n    pgConfig,\n    schemas,\n    Object.assign({}, options, {\n      setWriteCacheCallback(fn) {\n        writeCache = fn;\n      },\n    })\n  );\n  const schema = builder.buildSchema();\n  if (writeCache) writeCache().catch(abort);\n  return schema;\n};\n\n/*\n * Unless an error occurs, `onNewSchema` is guaranteed to be called before this promise resolves\n */\nexport const watchPostGraphileSchema = async (\n  pgConfig: PgConfig,\n  schemas: Array<string> | string,\n  options: PostGraphileOptions = {},\n  onNewSchema: SchemaListener\n) => {\n  if (typeof onNewSchema !== \"function\") {\n    throw new Error(\n      \"You cannot call watchPostGraphileSchema without a function to pass new schemas to\"\n    );\n  }\n  if (options.readCache) {\n    throw new Error(\"Using readCache in watch mode does not make sense.\");\n  }\n  let writeCache;\n  const builder = await getPostGraphileBuilder(\n    pgConfig,\n    schemas,\n    Object.assign({}, options, {\n      setWriteCacheCallback(fn) {\n        writeCache = fn;\n      },\n    })\n  );\n  let released = false;\n  function handleNewSchema(...args) {\n    if (writeCache) writeCache().catch(abort);\n    onNewSchema(...args);\n  }\n  await builder.watchSchema(handleNewSchema);\n\n  return async function release() {\n    if (released) return;\n    released = true;\n    await builder.unwatchSchema();\n  };\n};\n\n// Backwards compat\nexport const postGraphQLBaseOverrides = postGraphileBaseOverrides;\nexport const postGraphQLClassicIdsOverrides = postGraphileClassicIdsOverrides;\nexport const postGraphQLInflection = postGraphileInflection;\nexport const postGraphQLClassicIdsInflection = postGraphileClassicIdsInflection;\nexport const createPostGraphQLSchema = createPostGraphileSchema;\nexport const watchPostGraphQLSchema = watchPostGraphileSchema;\n"]}