{"version":3,"sources":["../src/PersistentMemoizeToJSONPlugin.js"],"names":["PersistentMemoizeToJSONPlugin","builder","persistentMemoizeToJSONFilePath","persistentMemoizeToJSONMode","writeMode","readMode","Error","readCacheFromFile","resolve","reject","readFile","err","fileContents","parsed","JSON","parse","e","writeCacheToFile","obj","writeFile","initialCache","hook","build","persistentMemoizeWithKeySetState","_","persistentMemoizeWithKeyGetState"],"mappings":";;;;;;;;;;;;;;;;;;AACA;;;;;;kBAGgB,eAAeA,6BAAf,CACdC,OADc,EAEd,EAAEC,+BAAF,EAAmCC,2BAAnC,EAFc,EAGd;AACA,QAAMC,YAAYD,gCAAgC,OAAlD;AACA,QAAME,WAAWF,gCAAgC,MAAjD;;AAEA,MAAIA,+BAA+B,CAACC,SAAhC,IAA6C,CAACC,QAAlD,EAA4D;AAC1D,UAAM,IAAIC,KAAJ,CACH,gDAA+C,yBAC9CH,2BAD8C,CAE9C,EAHE,CAAN;AAKD;;AAED,MAAI,CAACE,YAAYD,SAAb,KAA2B,CAACF,+BAAhC,EAAiE;AAC/D,UAAM,IAAII,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,MAAI,CAACD,QAAD,IAAa,CAACD,SAAlB,EAA6B;AAC3B;AACA;AACD;;AAED,QAAMG,oBAAoB,MACxB,sBAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,iBAAGC,QAAH,CACER,+BADF,EAEE,MAFF,EAGE,CAACS,GAAD,EAAMC,YAAN,KAAuB;AACrB,UAAID,GAAJ,EAAS;AACP,eAAOF,OAAOE,GAAP,CAAP;AACD;AACD,UAAI;AACF,cAAME,SAASC,KAAKC,KAAL,CAAWH,YAAX,CAAf;AACA,eAAOC,MAAP;AACD,OAHD,CAGE,OAAOG,CAAP,EAAU;AACVP,eAAOO,CAAP;AACD;AACF,KAbH;AAeD,GAhBD,CADF;;AAmBA,QAAMC,mBAAmBC,OACvB,sBAAY,CAACV,OAAD,EAAUC,MAAV,KAAqB;AAC/B,iBAAGU,SAAH,CACEjB,+BADF,EAEE,yBAAegB,GAAf,CAFF,EAGEP,OAAO;AACL,UAAIA,GAAJ,EAAS;AACP,eAAOF,OAAOE,GAAP,CAAP;AACD;AACD,aAAOH,SAAP;AACD,KARH;AAUD,GAXD,CADF;;AAcA,QAAMY,eACJlB,mCAAmCG,QAAnC,GACI,MAAME,mBADV,GAEI,EAHN;;AAKAN,UAAQoB,IAAR,CAAa,OAAb,EAAsBC,SAAS;AAC7BA,UAAMC,gCAAN,CAAuC,sBAAc,EAAd,EAAkBH,YAAlB,CAAvC;AACA,WAAOE,KAAP;AACD,GAHD;;AAKArB,UAAQoB,IAAR,CAAa,UAAb,EAAyB,CAACG,CAAD,EAAIF,KAAJ,KAAc;AACrCL,qBAAiBK,MAAMG,gCAAN,EAAjB;AACA,WAAOD,CAAP;AACD,GAHD;AAID,C","file":"PersistentMemoizeToJSONPlugin.js","sourcesContent":["// @flow\nimport fs from \"fs\";\nimport type { Plugin } from \"graphile-build\";\n\nexport default (async function PersistentMemoizeToJSONPlugin(\n  builder,\n  { persistentMemoizeToJSONFilePath, persistentMemoizeToJSONMode }\n) {\n  const writeMode = persistentMemoizeToJSONMode === \"write\";\n  const readMode = persistentMemoizeToJSONMode === \"read\";\n\n  if (persistentMemoizeToJSONMode && !writeMode && !readMode) {\n    throw new Error(\n      `Invalid persistentMemoizeToJSONMode setting: ${JSON.stringify(\n        persistentMemoizeToJSONMode\n      )}`\n    );\n  }\n\n  if ((readMode || writeMode) && !persistentMemoizeToJSONFilePath) {\n    throw new Error(\"No 'persistentMemoizeToJSONFilePath' specified\");\n  }\n\n  if (!readMode && !writeMode) {\n    // Nothing to do.\n    return;\n  }\n\n  const readCacheFromFile = () =>\n    new Promise((resolve, reject) => {\n      fs.readFile(\n        persistentMemoizeToJSONFilePath,\n        \"utf8\",\n        (err, fileContents) => {\n          if (err) {\n            return reject(err);\n          }\n          try {\n            const parsed = JSON.parse(fileContents);\n            return parsed;\n          } catch (e) {\n            reject(e);\n          }\n        }\n      );\n    });\n\n  const writeCacheToFile = obj =>\n    new Promise((resolve, reject) => {\n      fs.writeFile(\n        persistentMemoizeToJSONFilePath,\n        JSON.stringify(obj),\n        err => {\n          if (err) {\n            return reject(err);\n          }\n          return resolve();\n        }\n      );\n    });\n\n  const initialCache =\n    persistentMemoizeToJSONFilePath && readMode\n      ? await readCacheFromFile()\n      : {};\n\n  builder.hook(\"build\", build => {\n    build.persistentMemoizeWithKeySetState(Object.assign({}, initialCache));\n    return build;\n  });\n\n  builder.hook(\"finalize\", (_, build) => {\n    writeCacheToFile(build.persistentMemoizeWithKeyGetState());\n    return _;\n  });\n}: Plugin);\n"]}