"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.watchPostGraphileSchema = exports.createPostGraphileSchema = exports.postGraphileClassicIdsInflection = exports.postGraphileInflection = exports.postGraphileClassicIdsOverrides = exports.postGraphileBaseOverrides = exports.watchPostGraphQLSchema = exports.createPostGraphQLSchema = exports.postGraphQLClassicIdsInflection = exports.postGraphQLInflection = exports.postGraphQLClassicIdsOverrides = exports.postGraphQLBaseOverrides = exports.inflections = undefined;

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _graphileBuild = require("graphile-build");

var _graphileBuildPg = require("graphile-build-pg");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ensureValidPlugins = function ensureValidPlugins(name, arr) {
  if (!Array.isArray(arr)) {
    throw new Error(`Option '${name}' should be an array`);
  }
  for (var i = 0, l = arr.length; i < l; i++) {
    var _fn = arr[i];
    if (typeof _fn !== "function") {
      throw new Error(`Option '${name}' should be an array of functions, found '${typeof _fn}' at index ${i}`);
    }
  }
};
exports.inflections = _graphileBuildPg.inflections;
var postGraphQLBaseOverrides = exports.postGraphQLBaseOverrides = {
  enumName(value) {
    return _graphileBuildPg.inflections.defaultUtils.constantCase(_graphileBuildPg.inflections.defaultInflection.enumName(value));
  }
};

var postGraphQLClassicIdsOverrides = exports.postGraphQLClassicIdsOverrides = {
  column(name, _table, _schema) {
    return name === "id" ? "rowId" : _graphileBuildPg.inflections.defaultUtils.camelCase(name);
  }
};

var postGraphQLInflection = exports.postGraphQLInflection = _graphileBuildPg.inflections.newInflector(postGraphQLBaseOverrides);
var postGraphQLClassicIdsInflection = exports.postGraphQLClassicIdsInflection = _graphileBuildPg.inflections.newInflector((0, _assign2.default)({}, postGraphQLBaseOverrides, postGraphQLClassicIdsOverrides));

var awaitKeys = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(obj) {
    var result, k;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            result = {};
            _context.t0 = _regenerator2.default.keys(obj);

          case 2:
            if ((_context.t1 = _context.t0()).done) {
              _context.next = 9;
              break;
            }

            k = _context.t1.value;
            _context.next = 6;
            return obj[k];

          case 6:
            result[k] = _context.sent;
            _context.next = 2;
            break;

          case 9:
            return _context.abrupt("return", result);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function awaitKeys(_x) {
    return _ref.apply(this, arguments);
  };
}();

var getPostGraphQLBuilder = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(pgConfig, schemas) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var dynamicJson, classicIds, nodeIdFieldName, replaceAllPlugins, _options$appendPlugin, appendPlugins, _options$prependPlugi, prependPlugins, _options$skipPlugins, skipPlugins, jwtPgTypeIdentifier, jwtSecret, disableDefaultMutations, graphileBuildOptions, graphqlBuildOptions, inflector, pgColumnFilter, viewUniqueKey, _options$enableTags, enableTags, readCache, writeCache, setWriteCacheCallback, _options$legacyRelati, legacyRelations, persistentMemoizeWithKey, memoizeCache;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            dynamicJson = options.dynamicJson, classicIds = options.classicIds, nodeIdFieldName = options.nodeIdFieldName, replaceAllPlugins = options.replaceAllPlugins, _options$appendPlugin = options.appendPlugins, appendPlugins = _options$appendPlugin === undefined ? [] : _options$appendPlugin, _options$prependPlugi = options.prependPlugins, prependPlugins = _options$prependPlugi === undefined ? [] : _options$prependPlugi, _options$skipPlugins = options.skipPlugins, skipPlugins = _options$skipPlugins === undefined ? [] : _options$skipPlugins, jwtPgTypeIdentifier = options.jwtPgTypeIdentifier, jwtSecret = options.jwtSecret, disableDefaultMutations = options.disableDefaultMutations, graphileBuildOptions = options.graphileBuildOptions, graphqlBuildOptions = options.graphqlBuildOptions, inflector = options.inflector, pgColumnFilter = options.pgColumnFilter, viewUniqueKey = options.viewUniqueKey, _options$enableTags = options.enableTags, enableTags = _options$enableTags === undefined ? true : _options$enableTags, readCache = options.readCache, writeCache = options.writeCache, setWriteCacheCallback = options.setWriteCacheCallback, _options$legacyRelati = options.legacyRelations, legacyRelations = _options$legacyRelati === undefined ? "deprecated" : _options$legacyRelati;

            if (!(legacyRelations && ["only", "deprecated", "omit"].indexOf(legacyRelations) < 0)) {
              _context2.next = 3;
              break;
            }

            throw new Error("Invalid configuration for legacy relations: " + (0, _stringify2.default)(legacyRelations));

          case 3:
            if (!replaceAllPlugins) {
              _context2.next = 7;
              break;
            }

            ensureValidPlugins("replaceAllPlugins", replaceAllPlugins);

            if (!(prependPlugins && prependPlugins.length || appendPlugins && appendPlugins.length)) {
              _context2.next = 7;
              break;
            }

            throw new Error("When using 'replaceAllPlugins' you must not specify 'appendPlugins'/'prependPlugins'");

          case 7:
            if (!(readCache && writeCache)) {
              _context2.next = 9;
              break;
            }

            throw new Error("Use `readCache` or `writeCache` - not both.");

          case 9:
            persistentMemoizeWithKey = undefined; // NOT null, otherwise it won't default correctly.

            memoizeCache = {};

            if (!readCache) {
              _context2.next = 17;
              break;
            }

            _context2.t0 = JSON;
            _context2.next = 15;
            return new _promise2.default(function (resolve, reject) {
              _fs2.default.readFile(readCache, "utf8", function (err, data) {
                if (err) {
                  reject(err);
                } else {
                  resolve(data);
                }
              });
            });

          case 15:
            _context2.t1 = _context2.sent;
            memoizeCache = _context2.t0.parse.call(_context2.t0, _context2.t1);

          case 17:
            if (readCache || writeCache) {
              persistentMemoizeWithKey = function persistentMemoizeWithKey(key, fn) {
                if (!(key in memoizeCache)) {
                  if (readCache) {
                    throw new Error(`Expected cache to contain key: ${key}`);
                  }
                  memoizeCache[key] = fn();
                  if (memoizeCache[key] === undefined) {
                    throw new Error(`Cannot memoize 'undefined' - use 'null' instead`);
                  }
                }
                return memoizeCache[key];
              };
            }

            if (!(writeCache && setWriteCacheCallback)) {
              _context2.next = 22;
              break;
            }

            setWriteCacheCallback(function () {
              return awaitKeys(memoizeCache).then(function (obj) {
                return new _promise2.default(function (resolve, reject) {
                  _fs2.default.writeFile(writeCache, (0, _stringify2.default)(obj), function (err) {
                    memoizeCache = {};
                    if (err) {
                      reject(err);
                    } else {
                      resolve();
                    }
                  });
                });
              });
            });
            _context2.next = 27;
            break;

          case 22:
            if (!writeCache) {
              _context2.next = 26;
              break;
            }

            throw new Error("Cannot write cache without 'setWriteCacheCallback'");

          case 26:
            if (setWriteCacheCallback) {
              setWriteCacheCallback(function () {
                return _promise2.default.resolve();
              });
            }

          case 27:
            ensureValidPlugins("prependPlugins", prependPlugins);
            ensureValidPlugins("appendPlugins", appendPlugins);
            ensureValidPlugins("skipPlugins", skipPlugins);
            return _context2.abrupt("return", (0, _graphileBuild.getBuilder)((replaceAllPlugins ? [].concat((0, _toConsumableArray3.default)(prependPlugins), (0, _toConsumableArray3.default)(replaceAllPlugins), (0, _toConsumableArray3.default)(appendPlugins)) : [].concat((0, _toConsumableArray3.default)(prependPlugins), (0, _toConsumableArray3.default)(_graphileBuild.defaultPlugins), (0, _toConsumableArray3.default)(_graphileBuildPg.defaultPlugins), (0, _toConsumableArray3.default)(appendPlugins))).filter(function (p) {
              return skipPlugins.indexOf(p) === -1;
            }), (0, _assign2.default)({
              pgConfig: pgConfig,
              pgSchemas: Array.isArray(schemas) ? schemas : [schemas],
              pgExtendedTypes: !!dynamicJson,
              pgColumnFilter: pgColumnFilter || function () {
                return true;
              },
              pgInflection: inflector || (classicIds ? postGraphQLClassicIdsInflection : postGraphQLInflection),
              nodeIdFieldName: nodeIdFieldName || (classicIds ? "id" : "nodeId"),
              pgJwtTypeIdentifier: jwtPgTypeIdentifier,
              pgJwtSecret: jwtSecret,
              pgDisableDefaultMutations: disableDefaultMutations,
              pgViewUniqueKey: viewUniqueKey,
              pgEnableTags: enableTags,
              pgLegacyRelations: legacyRelations,
              persistentMemoizeWithKey
            }, graphileBuildOptions, graphqlBuildOptions // DEPRECATED!
            )));

          case 31:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function getPostGraphQLBuilder(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

function abort(e) {
  /* eslint-disable no-console */
  console.error("Error occured whilst writing cache");
  console.error(e);
  process.exit(1);
  /* eslint-enable */
}

var createPostGraphQLSchema = exports.createPostGraphQLSchema = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(pgConfig, schemas) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var writeCache, builder, schema;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            writeCache = void 0;
            _context3.next = 3;
            return getPostGraphQLBuilder(pgConfig, schemas, (0, _assign2.default)({}, options, {
              setWriteCacheCallback(fn) {
                writeCache = fn;
              }
            }));

          case 3:
            builder = _context3.sent;
            schema = builder.buildSchema();

            if (writeCache) writeCache().catch(abort);
            return _context3.abrupt("return", schema);

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function createPostGraphQLSchema(_x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();

/*
 * Unless an error occurs, `onNewSchema` is guaranteed to be called before this promise resolves
 */
var watchPostGraphQLSchema = exports.watchPostGraphQLSchema = function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(pgConfig, schemas) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var onNewSchema = arguments[3];
    var writeCache, builder, released, handleNewSchema;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            handleNewSchema = function handleNewSchema() {
              if (writeCache) writeCache().catch(abort);
              onNewSchema.apply(undefined, arguments);
            };

            if (!(typeof onNewSchema !== "function")) {
              _context5.next = 3;
              break;
            }

            throw new Error("You cannot call watchPostGraphQLSchema without a function to pass new schemas to");

          case 3:
            if (!options.readCache) {
              _context5.next = 5;
              break;
            }

            throw new Error("Using readCache in watch mode does not make sense.");

          case 5:
            writeCache = void 0;
            _context5.next = 8;
            return getPostGraphQLBuilder(pgConfig, schemas, (0, _assign2.default)({}, options, {
              setWriteCacheCallback(fn) {
                writeCache = fn;
              }
            }));

          case 8:
            builder = _context5.sent;
            released = false;
            _context5.next = 12;
            return builder.watchSchema(handleNewSchema);

          case 12:
            return _context5.abrupt("return", function () {
              var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        if (!released) {
                          _context4.next = 2;
                          break;
                        }

                        return _context4.abrupt("return");

                      case 2:
                        released = true;
                        _context4.next = 5;
                        return builder.unwatchSchema();

                      case 5:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4, this);
              }));

              function release() {
                return _ref5.apply(this, arguments);
              }

              return release;
            }());

          case 13:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function watchPostGraphQLSchema(_x9, _x10) {
    return _ref4.apply(this, arguments);
  };
}();

var postGraphileBaseOverrides = exports.postGraphileBaseOverrides = postGraphQLBaseOverrides;
var postGraphileClassicIdsOverrides = exports.postGraphileClassicIdsOverrides = postGraphQLClassicIdsOverrides;
var postGraphileInflection = exports.postGraphileInflection = postGraphQLInflection;
var postGraphileClassicIdsInflection = exports.postGraphileClassicIdsInflection = postGraphQLClassicIdsInflection;
var createPostGraphileSchema = exports.createPostGraphileSchema = createPostGraphQLSchema;
var watchPostGraphileSchema = exports.watchPostGraphileSchema = watchPostGraphQLSchema;
//# sourceMappingURL=index.js.map